#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[506] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      156,  155,  154,   84,  110,  153,   71,   95,  129,  101,
      102,   79,   73,  106,   76,  107,   91,  141,  155,  105,
      108,   89,   81,   87,   70,   99,  100,   93,  153,  132,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  109,  153,  153,  153,  153,  153,  153,  153,  153,
      103,   97,  104,   94,  111,  127,  128,  155,  130,  131,
      133,  155,  135,  137,  155,  154,   85,  153,   72,   96,
       80,   75,   74,   78,   77,  143,  136,  140,   92,    0,
        0,    0,  142,  145,    0,   90,   82,   88,    0,  153,

      153,  153,    3,  153,  153,  153,  153,  153,  153,   16,
      153,  153,  153,  153,  153,  153,  153,  153,  153,   27,
      153,   30,   34,  153,  153,  153,  153,  153,  153,  153,
       44,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,   98,  111,  126,
      117,  116,  114,  114,  118,  119,  120,  121,  122,  123,
      126,  124,  126,  130,  133,  134,  137,  138,    0,  139,
       86,  143,    0,  144,  140,  147,    0,  149,    0,  151,
        0,    0,    0,    0,  142,  141,  145,    0,  146,    0,
       83,  144,  153,    2,  153,  153,  153,  153,  153,  153,

      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
       23,  153,  153,   26,  153,  153,  153,  153,  153,   36,
      153,  153,  153,   40,  153,  153,  153,  153,  153,  153,
      153,  153,  153,  153,   52,  153,  153,  153,  153,  153,
      153,  153,  153,   61,  153,  153,  153,  153,   67,  153,
      153,  125,  114,  114,  115,  112,  112,    0,    0,  143,
        0,    0,  144,  147,  148,  148,    0,  149,  150,  150,
        0,  151,  152,  152,    0,    0,    0,  141,    0,  142,
        0,  146,  146,    0,  144,  144,  153,  153,  153,    6,
      153,  153,  153,  153,  153,  153,  153,  153,   17,   18,

      153,  153,  153,  153,   24,  153,  153,  153,  153,  153,
      153,  153,  153,  153,  153,   41,  153,  153,  153,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
       58,  153,   60,   62,  153,  153,  153,   68,  153,  114,
      113,    0,  143,  144,    0,  144,    0,  144,  148,  148,
      148,  150,  150,  150,  152,  152,  152,    0,    0,  141,
      142,    0,  142,    0,  146,  146,  146,  153,  153,    5,
        7,    8,   10,  153,  153,  153,  153,  153,  153,  153,
       21,  153,  153,  153,  153,   31,  153,  153,   35,  153,
      153,   39,  153,  153,  153,  153,  153,  153,  153,  153,

      153,  153,  153,   55,  153,  153,   59,  153,  153,  153,
      153,   69,    0,  144,  144,  144,  148,  150,  152,    0,
      142,  142,  142,  153,  153,  153,  153,  153,  153,  153,
       15,   19,  153,  153,  153,  153,   29,  153,  153,   37,
      153,   42,   43,  153,  153,  153,   48,  153,  153,   51,
       53,   54,   56,   57,   63,  153,   65,  153,  144,  142,
      153,    4,  153,  153,  153,   13,   14,   20,   22,  153,
      153,  153,  153,  153,   45,   46,  153,  153,   50,  153,
       66,    1,  153,    9,   12,   25,  153,  153,  153,  153,
      153,   49,  153,  153,  153,  153,   33,   38,   47,   64,

      153,   28,   32,   11,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    1,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   24,   23,   23,   23,   25,   25,   26,   27,   28,
       29,   30,   31,    1,   32,   33,   34,   35,   36,   32,
       37,   38,   37,   39,   39,   39,   39,   39,   40,   39,
       39,   39,   41,   37,   39,   39,   39,   42,   39,   39,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   39,   74,   75,   76,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[78] =
    {   0,
        1,    1,    1,    2,    3,    1,    1,    4,    1,    1,
        1,    5,    6,    6,    7,    1,    6,    1,    1,    1,
        8,    9,    9,    8,    9,    1,    1,    1,    1,    1,
        1,    9,    9,   10,   11,   11,   12,   13,   14,   14,
       15,   13,    1,   16,    1,    1,   17,   18,    9,    9,
        9,    9,    9,    9,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   19,    1,   19,    1
    } ;

static const flex_int16_t yy_base[525] =
    {   0,
        0,    0,   74,   76,   81,   83,   46,   48, 1233, 1232,
     1246, 1249,   94, 1216, 1249,    0, 1215, 1232, 1249, 1249,
     1249, 1213,   73, 1249,   83,   82,   93,   81,  111, 1249,
     1249, 1212, 1211, 1210, 1249, 1249, 1249, 1249,   64, 1249,
       76,   53,   88,   76,   80,   97, 1185,   95, 1184, 1183,
     1172,   92,  105,   81, 1181,  111,  112, 1171,   61, 1176,
     1249, 1156, 1249, 1249,    0, 1249, 1249,  184,    0, 1249,
        0, 1182, 1249,    0,  150,  168, 1200,    0, 1249, 1249,
     1249, 1249, 1249, 1249, 1249,  176, 1249,    0, 1249,  155,
      192, 1181,  177,  236,  220, 1249, 1198, 1249,  241,  148,

     1159, 1152,    0, 1161, 1170,  123, 1173, 1159,  171,    0,
     1153, 1150,  162, 1158, 1155, 1150, 1152, 1152, 1144,    0,
     1147,  214,    0, 1137, 1141, 1156, 1137,  123,  143, 1139,
        0, 1145,   52, 1145,  183, 1126,  169, 1124, 1130, 1125,
      154,  164, 1121,  217, 1118, 1121, 1117, 1249,    0, 1249,
     1249, 1249,  256,  263, 1249, 1249, 1249, 1249, 1249, 1249,
        0, 1249,  269,    0,    0, 1249,    0,  255,  280, 1249,
     1249,  288,  309,  315,    0,  295,  307,  322,  326, 1126,
     1113,  331,  336, 1111,  330,  363,  373,  390,  400,  407,
     1249,  419, 1088,    0, 1092, 1102, 1096, 1095, 1074,  229,

     1071, 1079, 1079, 1074, 1073, 1064, 1061, 1049, 1002, 1012,
        0,  998,  989,    0,  301,  976,  959,  973,  958,    0,
      940,  955,  954,    0,  944,  868,  864,  857,  845,  846,
      852,  859,  841,  840,    0,  840,  850,  852,  836,  853,
      835,  837,  846,    0,  845,  832,  808,  810,    0,  819,
      798, 1249,  427,  435, 1249, 1249,    0,    0,  439,  446,
      457,  467,  473,  344,  353,  360,  455,  484,  489,  494,
      500,  810,  809,  808,  806,  399,  521,  527,  537,  542,
      569,  577,  584,  604,  611,  618,  786,  793,  786,    0,
      763,  751,  740,  750,  751,  756,  734,  734,    0,    0,

      735,  737,  738,  730,    0,  708,  721,  706,  699,  715,
      697,  702,  689,  681,  681,    0,  685,  686,  687,  680,
      665,  654,  647,  652,  636,  643,  635,  625,  633,  620,
        0,  611,    0,  594,  602,  586,  590,    0,  599, 1249,
     1249,  638,  645,  651,  656,  665,  683,  692,  478,  507,
      535,  672,  699,  703,  603,  602,  601,  533,  710,  719,
      730,  737,  746,  757,  764,  773,  791,  597,  596,    0,
        0,    0,  578,  576,  568,  556,  561,  566,  550,  565,
        0,  555,  557,  551,  543,    0,  548,  550,    0,  535,
      519,    0,  515,  511,  522,  508,  524,  522,  508,  474,

      477,  487,  482,    0,  479,  474,    0,  479,  475,  477,
      456,    0,  800,  807,  812,  818,  550,  827,  472,  839,
      845,  854,  859,  452,  439,  418,  415,  421,  412,  377,
        0,    0,  372,  365,  371,  380,    0,  376,  369,    0,
      368,    0,    0,  352,  351,  335,    0,  341,  337,    0,
        0,    0,    0,    0,    0,  327,    0,  317,  866,  872,
      308,    0,  320,  314,  289,    0,    0,    0,    0,  264,
      253,  261,  257,  256,    0,    0,  253,  226,    0,  245,
        0,    0,  220,    0,    0,    0,  205,  208,  194,  183,
      131,    0,  129,  112,  102,   63,    0,    0,    0,    0,

       25,    0,    0,    0, 1249,  919,  938,  957,  976,  988,
     1005, 1024, 1043, 1062, 1081, 1100, 1112, 1129, 1142, 1161,
     1172, 1182, 1192, 1196
    } ;

static const flex_int16_t yy_def[525] =
    {   0,
      505,    1,  506,  506,  507,  507,  508,  508,  509,  509,
      505,  505,  505,  505,  505,  510,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  510,  505,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      505,  505,  505,  505,  511,  505,  505,  505,  512,  505,
      513,   68,  505,  514,  515,  505,  505,  510,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  516,  505,  505,
      505,  517,  505,  505,  505,  505,  505,  505,  505,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  505,  511,  505,
      505,  505,  518,  505,  505,  505,  505,  505,  505,  505,
      519,  505,  520,  512,  513,  505,  514,  515,  515,  505,
      505,  505,  505,  505,  516,  505,  505,  505,  505,  521,
      522,  505,  505,  522,  505,  505,  505,  505,  505,  505,
      505,  505,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  505,  505,  505,  505,  505,  523,  523,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  521,  521,  524,  522,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  524,  524,  524,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  505,  505,  505,  505,  505,  505,  524,  505,
      505,  505,  505,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  505,  505,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,

      510,  510,  510,  510,    0,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505
    } ;

static const flex_int16_t yy_nxt[1327] =
    {   0,
       12,   12,   13,   13,   13,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   36,   12,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   16,   48,   16,   49,   50,
       51,   52,   53,   54,   16,   55,   56,   57,   58,   59,
       60,   16,   16,   61,   62,   63,   64,   66,   12,   66,
       12,   67,   99,   67,   66,   12,   66,   12,   82,   72,
      504,   72,   70,   73,   70,   73,   76,   76,   76,   76,

       84,   83,   86,   86,   86,   86,   86,   87,  229,  145,
      100,   85,   88,   90,  230,  104,  503,   68,  105,   68,
       91,   89,   92,  146,   68,  101,   68,   93,  109,  132,
       90,   94,   94,   94,   94,   94,  106,  102,  110,  111,
      127,  112,  103,   91,  128,  114,  133,  107,  120,  134,
      108,  113,   92,  115,  130,  121,  122,   95,  131,  116,
      129,  123,  117,  136,  169,  118,   99,  141,  502,  170,
       76,   76,   76,   76,  501,  176,  176,  142,  137,  138,
      500,  139,  499,  140,  143,  150,  150,  150,  150,  197,
      198,  151,  223,  224,  100,  152,  172,  172,  172,  172,

      172,  177,  225,  226,  153,  154,  154,  154,  150,  182,
      241,  173,  178,  178,  178,  178,  183,  236,  184,  242,
      201,  202,  174,  185,  203,  207,  182,  155,  173,  208,
      204,  232,  243,  156,  237,  498,  244,  157,  179,  183,
       94,   94,   94,   94,   94,  158,  497,  233,  184,  159,
      234,  160,  161,  162,  186,  163,  187,  187,  187,  187,
      187,  192,  192,  192,  192,  192,  190,  216,  246,  505,
      496,  188,  495,  247,  505,  248,  253,  253,  253,  253,
      217,  218,  189,  254,  254,  254,  254,  494,  188,  257,
      257,  257,  257,  257,  169,  293,  294,  493,  492,  170,

      257,  257,  257,  258,  258,  491,  490,  489,  172,  172,
      172,  172,  172,  488,  487,  264,  264,  257,  257,  257,
      257,  257,  257,  173,  259,  486,  259,  266,  266,  260,
      260,  260,  260,  260,  174,  172,  172,  172,  172,  172,
      173,  265,  268,  268,  268,  268,  270,  270,  270,  270,
      262,  266,  266,  267,  485,  261,  270,  270,  270,  270,
      307,  263,  182,  308,  264,  264,  484,  262,  269,  183,
      483,  184,  271,  264,  264,  482,  185,  177,  481,  182,
      350,  350,  179,   86,   86,   86,   86,   86,  480,  479,
      265,  186,  183,  187,  187,  187,  187,  187,  188,  349,

      478,  184,  477,  476,  475,  277,  351,  277,  188,  276,
      278,  278,  278,  278,  278,  188,  474,  473,  280,  189,
      187,  187,  187,  187,  187,  188,  472,  283,  283,  283,
      283,  283,  471,  470,  281,  281,  279,  469,  468,  285,
      285,  285,  285,  285,  467,  358,  282,  340,  340,  340,
      340,  281,  281,  284,  262,  340,  340,  340,  340,  260,
      260,  260,  260,  260,  466,  286,  343,  343,  343,  343,
      343,  262,  345,  465,  345,  266,  266,  346,  346,  346,
      346,  346,  345,  464,  345,  342,  463,  346,  346,  346,
      346,  346,  344,  285,  285,  285,  285,  285,  350,  350,

      462,  267,  461,  347,  268,  268,  268,  268,  262,  268,
      268,  268,  268,  261,  353,  353,  353,  353,  419,  348,
      270,  270,  270,  270,  417,  262,  458,  350,  350,  457,
      269,  456,  455,  454,  453,  352,  452,  451,  450,  449,
      354,  278,  278,  278,  278,  278,  271,  360,  360,  360,
      360,  360,  362,  351,  362,  350,  350,  363,  363,  363,
      363,  363,  192,  192,  192,  192,  192,  359,  281,  448,
      350,  350,  447,  361,  446,  445,  444,  281,  443,  358,
      442,  349,  441,  364,  362,  281,  362,  440,  276,  363,
      363,  363,  363,  363,  281,  280,  417,  365,  365,  365,

      365,  365,  280,  439,  365,  365,  365,  365,  365,  438,
      437,  436,  281,  435,  434,  279,  433,  432,  431,  281,
      430,  429,  428,  366,  283,  283,  283,  283,  283,  281,
      367,  285,  285,  285,  285,  285,  281,  427,  285,  285,
      285,  285,  285,  426,  425,  424,  262,  355,  357,  419,
      284,  412,  411,  262,  410,  409,  408,  286,  346,  346,
      346,  346,  346,  262,  263,  343,  343,  343,  343,  343,
      262,  343,  343,  343,  343,  343,  346,  346,  346,  346,
      346,  407,  406,  405,  413,  415,  415,  415,  415,  415,
      404,  344,  353,  353,  353,  353,  403,  414,  345,  402,

      345,  401,  342,  346,  346,  346,  346,  346,  400,  399,
      398,  416,  285,  285,  285,  285,  285,  397,  418,  353,
      353,  353,  353,  353,  353,  353,  353,  262,  396,  347,
      363,  363,  363,  363,  363,  395,  394,  393,  348,  360,
      360,  360,  360,  360,  262,  354,  392,  391,  390,  352,
      360,  360,  360,  360,  360,  389,  420,  363,  363,  363,
      363,  363,  388,  387,  386,  361,  422,  422,  422,  422,
      422,  385,  362,  384,  362,  383,  421,  363,  363,  363,
      363,  363,  280,  359,  365,  365,  365,  365,  365,  382,
      381,  280,  423,  365,  365,  365,  365,  365,  380,  281,

      379,  378,  377,  364,  376,  375,  374,  373,  281,  280,
      367,  365,  365,  365,  365,  365,  281,  372,  371,  366,
      346,  346,  346,  346,  346,  281,  281,  415,  415,  415,
      415,  415,  415,  415,  415,  415,  415,  282,  415,  415,
      415,  415,  415,  281,  370,  369,  413,  353,  353,  353,
      353,  368,  275,  459,  357,  355,  273,  339,  416,  363,
      363,  363,  363,  363,  414,  422,  422,  422,  422,  422,
      338,  337,  336,  418,  422,  422,  422,  422,  422,  422,
      422,  422,  422,  422,  335,  420,  415,  415,  415,  415,
      415,  460,  422,  422,  422,  422,  422,  334,  333,  332,

      423,  331,  330,  329,  328,  421,  327,  326,  325,  324,
      323,  322,  459,  321,  320,  319,  318,  317,  460,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   78,   78,   78,   78,   78,

       78,   78,   78,  316,   78,  149,  315,  314,  313,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      312,  149,  149,  149,  164,  311,  310,  164,  309,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  306,
      164,  164,  164,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  305,  165,
      304,  165,  167,  167,  167,  167,  167,  167,  303,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  168,  168,  168,  168,  168,  168,  168,  168,

      175,  302,  175,  175,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  175,  175,  180,
      180,  180,  180,  301,  300,  299,  298,  297,  180,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  296,  295,
      292,  252,  252,  252,  252,  291,  252,  255,  290,  255,
      289,  288,  255,  255,  255,  287,  255,  181,  255,  275,
      255,  256,  256,  256,  256,  256,  256,  256,  256,  256,
      256,  256,  273,  251,  256,  256,  256,  250,  256,  272,
      272,  272,  272,  249,  245,  240,  239,  238,  272,  274,
      274,  274,  274,  235,  231,  228,  227,  222,  274,  341,

      341,  341,  341,  356,  356,  356,  356,  221,  220,  219,
      215,  214,  356,  213,  212,  211,  210,  209,  206,  205,
      200,  199,  196,  195,  194,  193,  191,  181,  171,  166,
      148,  147,  144,  135,  126,  125,  124,  119,   98,   97,
       96,   81,   80,   79,   77,  505,   75,   75,   11,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505
    } ;

static const flex_int16_t yy_chk[1327] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    3,    3,    4,
        4,    3,   39,    4,    5,    5,    6,    6,   23,    7,
      501,    8,    5,    7,    6,    8,   13,   13,   13,   13,

       25,   23,   26,   26,   26,   26,   26,   27,  133,   59,
       39,   25,   27,   28,  133,   42,  496,    3,   42,    4,
       28,   27,   28,   59,    5,   41,    6,   28,   44,   54,
       28,   29,   29,   29,   29,   29,   43,   41,   44,   45,
       52,   45,   41,   28,   52,   46,   54,   43,   48,   54,
       43,   45,   28,   46,   53,   48,   48,   29,   53,   46,
       52,   48,   46,   56,   75,   46,  100,   57,  495,   75,
       76,   76,   76,   76,  494,   90,   90,   57,   56,   56,
      493,   56,  491,   56,   57,   68,   68,   68,   68,  106,
      106,   68,  128,  128,  100,   68,   86,   86,   86,   86,

       86,   90,  129,  129,   68,   68,   68,   68,   68,   93,
      141,   86,   91,   91,   91,   91,   93,  137,   93,  141,
      109,  109,   86,   93,  109,  113,   93,   68,   86,  113,
      109,  135,  142,   68,  137,  490,  142,   68,   91,   93,
       95,   95,   95,   95,   95,   68,  489,  135,   93,   68,
      135,   68,   68,   68,   94,   68,   94,   94,   94,   94,
       94,   99,   99,   99,   99,   99,   95,  122,  144,  168,
      488,   94,  487,  144,  168,  144,  153,  153,  153,  153,
      122,  122,   94,  154,  154,  154,  154,  483,   94,  163,
      163,  163,  163,  163,  169,  200,  200,  480,  478,  169,

      163,  163,  163,  163,  163,  477,  474,  473,  172,  172,
      172,  172,  172,  472,  471,  176,  176,  163,  163,  163,
      163,  163,  163,  172,  173,  470,  173,  177,  177,  173,
      173,  173,  173,  173,  172,  174,  174,  174,  174,  174,
      172,  176,  178,  178,  178,  178,  179,  179,  179,  179,
      174,  182,  182,  177,  465,  173,  183,  183,  183,  183,
      215,  174,  185,  215,  264,  264,  464,  174,  178,  185,
      463,  185,  179,  265,  265,  461,  185,  182,  458,  185,
      266,  266,  183,  186,  186,  186,  186,  186,  456,  449,
      264,  187,  185,  187,  187,  187,  187,  187,  186,  265,

      448,  185,  446,  445,  444,  188,  266,  188,  187,  186,
      188,  188,  188,  188,  188,  186,  441,  439,  189,  187,
      189,  189,  189,  189,  189,  187,  438,  190,  190,  190,
      190,  190,  436,  435,  276,  189,  188,  434,  433,  192,
      192,  192,  192,  192,  430,  276,  189,  253,  253,  253,
      253,  276,  189,  190,  192,  254,  254,  254,  254,  259,
      259,  259,  259,  259,  429,  192,  260,  260,  260,  260,
      260,  192,  261,  428,  261,  267,  267,  261,  261,  261,
      261,  261,  262,  427,  262,  259,  426,  262,  262,  262,
      262,  262,  260,  263,  263,  263,  263,  263,  349,  349,

      425,  267,  424,  261,  268,  268,  268,  268,  263,  269,
      269,  269,  269,  262,  270,  270,  270,  270,  419,  263,
      271,  271,  271,  271,  349,  263,  411,  350,  350,  410,
      268,  409,  408,  406,  405,  269,  403,  402,  401,  400,
      270,  277,  277,  277,  277,  277,  271,  278,  278,  278,
      278,  278,  279,  350,  279,  351,  351,  279,  279,  279,
      279,  279,  280,  280,  280,  280,  280,  277,  358,  399,
      417,  417,  398,  278,  397,  396,  395,  280,  394,  358,
      393,  351,  391,  279,  281,  358,  281,  390,  280,  281,
      281,  281,  281,  281,  280,  282,  417,  282,  282,  282,

      282,  282,  283,  388,  283,  283,  283,  283,  283,  387,
      385,  384,  282,  383,  382,  281,  380,  379,  378,  283,
      377,  376,  375,  282,  284,  284,  284,  284,  284,  282,
      283,  285,  285,  285,  285,  285,  283,  374,  286,  286,
      286,  286,  286,  373,  369,  368,  285,  357,  356,  355,
      284,  339,  337,  286,  336,  335,  334,  285,  342,  342,
      342,  342,  342,  285,  286,  343,  343,  343,  343,  343,
      286,  344,  344,  344,  344,  344,  345,  345,  345,  345,
      345,  332,  330,  329,  342,  346,  346,  346,  346,  346,
      328,  343,  352,  352,  352,  352,  327,  344,  347,  326,

      347,  325,  345,  347,  347,  347,  347,  347,  324,  323,
      322,  346,  348,  348,  348,  348,  348,  321,  352,  353,
      353,  353,  353,  354,  354,  354,  354,  348,  320,  347,
      359,  359,  359,  359,  359,  319,  318,  317,  348,  360,
      360,  360,  360,  360,  348,  353,  315,  314,  313,  354,
      361,  361,  361,  361,  361,  312,  359,  362,  362,  362,
      362,  362,  311,  310,  309,  360,  363,  363,  363,  363,
      363,  308,  364,  307,  364,  306,  361,  364,  364,  364,
      364,  364,  365,  362,  365,  365,  365,  365,  365,  304,
      303,  366,  363,  366,  366,  366,  366,  366,  302,  365,

      301,  298,  297,  364,  296,  295,  294,  293,  366,  367,
      365,  367,  367,  367,  367,  367,  365,  292,  291,  366,
      413,  413,  413,  413,  413,  366,  367,  414,  414,  414,
      414,  414,  415,  415,  415,  415,  415,  367,  416,  416,
      416,  416,  416,  367,  289,  288,  413,  418,  418,  418,
      418,  287,  275,  414,  274,  273,  272,  251,  415,  420,
      420,  420,  420,  420,  416,  421,  421,  421,  421,  421,
      250,  248,  247,  418,  422,  422,  422,  422,  422,  423,
      423,  423,  423,  423,  246,  420,  459,  459,  459,  459,
      459,  421,  460,  460,  460,  460,  460,  245,  243,  242,

      422,  241,  240,  239,  238,  423,  237,  236,  234,  233,
      232,  231,  459,  230,  229,  228,  227,  226,  460,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  506,  506,
      506,  506,  506,  506,  506,  506,  506,  506,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  507,  507,  507,
      507,  507,  507,  507,  507,  507,  507,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  508,  508,  508,  508,
      508,  508,  508,  508,  508,  508,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  509,  509,  509,  509,  509,
      509,  509,  509,  509,  509,  510,  510,  510,  510,  510,

      510,  510,  510,  225,  510,  511,  223,  222,  221,  511,
      511,  511,  511,  511,  511,  511,  511,  511,  511,  511,
      219,  511,  511,  511,  512,  218,  217,  512,  216,  512,
      512,  512,  512,  512,  512,  512,  512,  512,  512,  213,
      512,  512,  512,  513,  513,  513,  513,  513,  513,  513,
      513,  513,  513,  513,  513,  513,  513,  513,  212,  513,
      210,  513,  514,  514,  514,  514,  514,  514,  209,  514,
      514,  514,  514,  514,  514,  514,  514,  514,  514,  514,
      514,  515,  515,  515,  515,  515,  515,  515,  515,  515,
      515,  515,  515,  515,  515,  515,  515,  515,  515,  515,

      516,  208,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  517,
      517,  517,  517,  207,  206,  205,  204,  203,  517,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  202,  201,
      199,  518,  518,  518,  518,  198,  518,  519,  197,  519,
      196,  195,  519,  519,  519,  193,  519,  184,  519,  181,
      519,  520,  520,  520,  520,  520,  520,  520,  520,  520,
      520,  520,  180,  147,  520,  520,  520,  146,  520,  521,
      521,  521,  521,  145,  143,  140,  139,  138,  521,  522,
      522,  522,  522,  136,  134,  132,  130,  127,  522,  523,

      523,  523,  523,  524,  524,  524,  524,  126,  125,  124,
      121,  119,  524,  118,  117,  116,  115,  114,  112,  111,
      108,  107,  105,  104,  102,  101,   97,   92,   77,   72,
       62,   60,   58,   55,   51,   50,   49,   47,   34,   33,
       32,   22,   18,   17,   14,   11,   10,    9,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,

      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[156] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "lexer.l"
#line 6 "lexer.l"

#include <string>
#include <algorithm>
#include <charconv>
#include <iostream>
#include <cstdio>


void Print(const std::string& message)
{
    std::cout << message << std::endl;
}

void PrintError(const std::string& errorMessage, const int line = -1) 
{
    std::cerr << "error: " << errorMessage << std::endl;
    if (line >= 0)
        std::cerr << "error line: " << line << std::endl;
    std::cerr << std::endl;
}

void PrintIntegerLiteral(const std::string& type, const int integer) {
    Print("Found " + type + " integer literal: " + std::to_string(integer));
}

void PrintFloatingPointLiteral(const double floatingPoint) {
    Print("Found floating point literal: " + std::to_string(floatingPoint));
}

void PrintStringLiteral(const std::string& literal) {
    Print("Found string literal: \"" + literal + "\"");
}

void RemoveCharacterFromString(std::string& str, char ch) {
    const auto newLast = std::remove(str.begin(), str.end(), ch);
    str.erase(newLast, str.end());
}

void RemoveUnderline(std::string& str) {
    RemoveCharacterFromString(str, '_');
}

#line 989 "lexer.flex.cpp"

#line 991 "lexer.flex.cpp"

#define INITIAL 0
#define DOUBLE_STR 1
#define SINGLE_STR 2
#define TEMPLATE_STR 3
#define MULTILINE_COMMENT 4

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 83 "lexer.l"




#line 88 "lexer.l"
std::string currentString;
std::string currentComment;
int currentInteger;
char currentCharacter;
double currentFloatingPoint;
char buffer[10];    



#line 1224 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 506 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 505 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 97 "lexer.l"
{ Print("Found KW_ABSTRACT: " + std::string{yytext}); } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 98 "lexer.l"
{ Print("Found TYPE_ANY: " + std::string{yytext}); } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 99 "lexer.l"
{ Print("Found KW_AS: " + std::string{yytext}); } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 100 "lexer.l"
{ Print("Found TYPE_BOOLEAN: " + std::string{yytext}); } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 101 "lexer.l"
{ Print("Found KW_BREAK: " + std::string{yytext}); } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 102 "lexer.l"
{ Print("Found KW_CASE: " + std::string{yytext}); } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 103 "lexer.l"
{ Print("Found KW_CATCH: " + std::string{yytext}); } 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 104 "lexer.l"
{ Print("Found KW_CLASS: " + std::string{yytext}); } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 105 "lexer.l"
{ Print("Found KW_CONTINUE: " + std::string{yytext}); } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 106 "lexer.l"
{ Print("Found KW_CONST: " + std::string{yytext}); } 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 107 "lexer.l"
{ Print("Found KW_CONSTRUCTOR: " + std::string{yytext}); } 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 108 "lexer.l"
{ Print("Found KW_DEBUGGER: " + std::string{yytext}); } 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 109 "lexer.l"
{ Print("Found KW_DECLARE: " + std::string{yytext}); } 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 110 "lexer.l"
{ Print("Found KW_DEFAULT: " + std::string{yytext}); } 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 111 "lexer.l"
{ Print("Found KW_DELETE: " + std::string{yytext}); } 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 112 "lexer.l"
{ Print("Found KW_DO: " + std::string{yytext}); } 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 113 "lexer.l"
{ Print("Found KW_ELSE: " + std::string{yytext}); } 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 114 "lexer.l"
{ Print("Found KW_ENUM: " + std::string{yytext}); } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 115 "lexer.l"
{ Print("Found KW_EXPORT: " + std::string{yytext}); } 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 116 "lexer.l"
{ Print("Found KW_EXTENDS: " + std::string{yytext}); } 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 117 "lexer.l"
{ Print("Found KW_FALSE: " + std::string{yytext}); } 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 118 "lexer.l"
{ Print("Found KW_FINALLY: " + std::string{yytext}); } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 119 "lexer.l"
{ Print("Found KW_FOR: " + std::string{yytext}); } 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 120 "lexer.l"
{ Print("Found KW_FROM: " + std::string{yytext}); } 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 121 "lexer.l"
{ Print("Found KW_FUNCTION: " + std::string{yytext}); } 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 122 "lexer.l"
{ Print("Found KW_GET: " + std::string{yytext}); } 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 123 "lexer.l"
{ Print("Found KW_IF: " + std::string{yytext}); } 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 124 "lexer.l"
{ Print("Found KW_IMPLEMENTS: " + std::string{yytext}); } 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 125 "lexer.l"
{ Print("Found KW_IMPORT: " + std::string{yytext}); } 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 126 "lexer.l"
{ Print("Found KW_IN: " + std::string{yytext}); } 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 127 "lexer.l"
{ Print("Found KW_INFER: " + std::string{yytext}); } 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 128 "lexer.l"
{ Print("Found KW_INSTANCEOF: " + std::string{yytext}); } 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 129 "lexer.l"
{ Print("Found KW_INTARFACE: " + std::string{yytext}); } 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 130 "lexer.l"
{ Print("Found KW_IS: " + std::string{yytext}); } 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 131 "lexer.l"
{ Print("Found KW_KEYOF: " + std::string{yytext}); } 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 132 "lexer.l"
{ Print("Found KW_LET: " + std::string{yytext}); } 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 133 "lexer.l"
{ Print("Found KW_MODULE: " + std::string{yytext}); } 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 134 "lexer.l"
{ Print("Found KW_NAMESPACE: " + std::string{yytext}); } 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 135 "lexer.l"
{ Print("Found TYPE_NEVER: " + std::string{yytext}); } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 136 "lexer.l"
{ Print("Found KW_NEW: " + std::string{yytext}); } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 137 "lexer.l"
{ Print("Found KW_NULL: " + std::string{yytext}); } 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 138 "lexer.l"
{ Print("Found TYPE_NUMBER: " + std::string{yytext}); } 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 139 "lexer.l"
{ Print("Found TYPE_OBJECT: " + std::string{yytext}); } 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 140 "lexer.l"
{ Print("Found KW_OF: " + std::string{yytext}); } 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 141 "lexer.l"
{ Print("Found KW_PACKAGE: " + std::string{yytext}); } 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 142 "lexer.l"
{ Print("Found KW_PRIVATE: " + std::string{yytext}); } 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 143 "lexer.l"
{ Print("Found KW_PROTECTED: " + std::string{yytext}); } 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 144 "lexer.l"
{ Print("Found KW_PUBLIC: " + std::string{yytext}); } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 145 "lexer.l"
{ Print("Found KW_READONLY: " + std::string{yytext}); } 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 146 "lexer.l"
{ Print("Found KW_REQUIRE: " + std::string{yytext}); } 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 147 "lexer.l"
{ Print("Found KW_RETURN: " + std::string{yytext}); } 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 148 "lexer.l"
{ Print("Found KW_SET: " + std::string{yytext}); } 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 149 "lexer.l"
{ Print("Found KW_STATIC: " + std::string{yytext}); } 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 150 "lexer.l"
{ Print("Found TYPE_STRING: " + std::string{yytext}); } 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 151 "lexer.l"
{ Print("Found KW_SUPER: " + std::string{yytext}); } 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 152 "lexer.l"
{ Print("Found KW_SWITCH: " + std::string{yytext}); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 153 "lexer.l"
{ Print("Found TYPE_SYMBOL: " + std::string{yytext}); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 154 "lexer.l"
{ Print("Found KW_THIS: " + std::string{yytext}); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 155 "lexer.l"
{ Print("Found KW_THROW: " + std::string{yytext}); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 156 "lexer.l"
{ Print("Found KW_TRUE: " + std::string{yytext}); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 157 "lexer.l"
{ Print("Found KW_TRY: " + std::string{yytext}); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 158 "lexer.l"
{ Print("Found KW_TYPE: " + std::string{yytext}); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 159 "lexer.l"
{ Print("Found KW_TYPEOF: " + std::string{yytext}); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 160 "lexer.l"
{ Print("Found KW_UNDEFINED: " + std::string{yytext}); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 161 "lexer.l"
{ Print("Found KW_UNIQUE: " + std::string{yytext}); } 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 162 "lexer.l"
{ Print("Found TYPE_UNKNOWN: " + std::string{yytext}); } 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 163 "lexer.l"
{ Print("Found KW_VAR: " + std::string{yytext}); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 164 "lexer.l"
{ Print("Found VOID_OPERATOR: " + std::string{yytext}); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 165 "lexer.l"
{ Print("Found KW_WHILE: " + std::string{yytext}); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 167 "lexer.l"
{ Print("Found OPERATOR_OPT_PARAM: " + std::string{yytext}); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 168 "lexer.l"
{ Print("Found OPERATOR_MOD: " + std::string{yytext}); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 169 "lexer.l"
{ Print("Found OPERATOR_MOD_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 170 "lexer.l"
{ Print("Found OPERATOR_PLUS: " + std::string{yytext}); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 171 "lexer.l"
{ Print("Found OPERATOR_PLUS_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 172 "lexer.l"
{ Print("Found OPERATOR_INCREMENT: " + std::string{yytext}); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 173 "lexer.l"
{ Print("Found OPERATOR_MINUS: " + std::string{yytext}); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 174 "lexer.l"
{ Print("Found OPERATOR_MINUS_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 175 "lexer.l"
{ Print("Found OPERATOR_DICREMENT: " + std::string{yytext}); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 176 "lexer.l"
{ Print("Found OPERATOR_MUL: " + std::string{yytext}); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 177 "lexer.l"
{ Print("Found OPERATOR_MUL_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 178 "lexer.l"
{ Print("Found OPERATOR_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 179 "lexer.l"
{ Print("Found OPERATOR_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 180 "lexer.l"
{ Print("Found OPERATOR_EQUAL_BY_TYPE_AND_VALUE: " + std::string{yytext}); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 181 "lexer.l"
{ Print("Found OPERATOR_BIT_NOT: " + std::string{yytext}); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 182 "lexer.l"
{ Print("Found OPERATOR_NOT_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 183 "lexer.l"
{ Print("Found OPERATOR_NOT_EQUAL_BY_TYPE_AND_VALUE: " + std::string{yytext}); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 184 "lexer.l"
{ Print("Found OPERATOR_MORE: " + std::string{yytext}); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 185 "lexer.l"
{ Print("Found OPERATOR_MORE_OR_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 186 "lexer.l"
{ Print("Found OPERATOR_LESS: " + std::string{yytext}); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 187 "lexer.l"
{ Print("Found OPERATOR_LESS_OR_EQUA: " + std::string{yytext}); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 188 "lexer.l"
{ Print("Found OPERATOR_DIV: " + std::string{yytext}); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 189 "lexer.l"
{ Print("Found OPERATOR_DIV_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 190 "lexer.l"
{ Print("Found OPERATOR_BIT_XOR: " + std::string{yytext}); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 191 "lexer.l"
{ Print("Found UNARY_BITWISE_NOT: " + std::string{yytext}); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 192 "lexer.l"
{ Print("Found OPERATOR_AMPERSAND: " + std::string{yytext}); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 193 "lexer.l"
{ Print("Found OPERATOR_AND: " + std::string{yytext}); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 194 "lexer.l"
{ Print("Found OPERATOR_BIT_OR: " + std::string{yytext}); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 195 "lexer.l"
{ Print("Found OPERATOR_OR: " + std::string{yytext}); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 196 "lexer.l"
{ Print("Found LEFT_SQUARE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 197 "lexer.l"
{ Print("Found RIGHT_SQUARE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 198 "lexer.l"
{ Print("Found LEFT_ROUND_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 199 "lexer.l"
{ Print("Found RIGHT_ROUND_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 200 "lexer.l"
{ Print("Found LEFT_FIGURE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 201 "lexer.l"
{ Print("Found RIGHT_FIGURE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 202 "lexer.l"
{ Print("Found COLON: " + std::string{yytext}); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 203 "lexer.l"
{ Print("Found COMMA: " + std::string{yytext}); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 204 "lexer.l"
{ Print("Found DOT: " + std::string{yytext}); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 205 "lexer.l"
{ Print("Found SEMICOLON: " + std::string{yytext}); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 206 "lexer.l"
{ Print("Found OPERATOR_ENTER: \\n" + std::string{yytext}); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "lexer.l"
{
    currentString.clear();
    BEGIN(DOUBLE_STR);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 212 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 112:
/* rule 112 can match eol */
YY_RULE_SETUP
#line 215 "lexer.l"
{
    PrintError("invalid hexadecimal escape sequence", yylineno);
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 218 "lexer.l"
{
    std::fill(std::begin(buffer), std::end(buffer), 0);
    std::copy(yytext, yytext + yyleng, buffer);
    std::sscanf(buffer + 2, "%x", &currentInteger);
    currentString += static_cast<char>(currentInteger);
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 224 "lexer.l"
{
    PrintError("octal escape sequence are not allowed", yylineno);
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 227 "lexer.l"
{
    PrintError("unicode escape sequence is not supported yet", yylineno);
}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 230 "lexer.l"
{
    currentString += "\'";
}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 233 "lexer.l"
{
    currentString += "\"";
}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 236 "lexer.l"
{
    currentString += "\\";
}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 239 "lexer.l"
{
    currentString += "\b";
}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 242 "lexer.l"
{
    currentString += "\f";
}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 245 "lexer.l"
{
    currentString += "\n";
}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 248 "lexer.l"
{
    currentString += "\r";
}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 251 "lexer.l"
{
    currentString += "\t";
}
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 254 "lexer.l"
{
    currentString += "\v";
}
	YY_BREAK
case 125:
/* rule 125 can match eol */
YY_RULE_SETUP
#line 257 "lexer.l"
{
    currentString += "\0";
}
	YY_BREAK
case 126:
/* rule 126 can match eol */
YY_RULE_SETUP
#line 260 "lexer.l"
{
    PrintError("invalid escape character", yylineno);
}
	YY_BREAK
case 127:
/* rule 127 can match eol */
YY_RULE_SETUP
#line 263 "lexer.l"
{
    PrintError("unexpected appearing \n in end of a line", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(DOUBLE_STR):
case YY_STATE_EOF(SINGLE_STR):
case YY_STATE_EOF(TEMPLATE_STR):
#line 267 "lexer.l"
{
    PrintError("unexpected appearing <<EOF>> in string literal", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 271 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 276 "lexer.l"
{
    currentString.clear();
    BEGIN(SINGLE_STR);
}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 280 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 283 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 288 "lexer.l"
{
    currentString.clear();
    BEGIN(TEMPLATE_STR);
}
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
#line 292 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 295 "lexer.l"
{
    currentString += "\`";
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 298 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 304 "lexer.l"
{
    currentComment.clear();
    BEGIN(MULTILINE_COMMENT);
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
#line 308 "lexer.l"
{
    currentComment += yytext;
}
	YY_BREAK
case 138:
/* rule 138 can match eol */
YY_RULE_SETUP
#line 311 "lexer.l"
{
    currentComment += yytext;
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 314 "lexer.l"
{
    Print("Found multiline comment: \n" + currentComment);
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 318 "lexer.l"
{
    PrintError("no closing */ of multiline comment", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 323 "lexer.l"
{ 
    Print("Found singleline comment: " + std::string{yytext + 2}); 
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 328 "lexer.l"
{ /* Decimal literal */
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 334 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 338 "lexer.l"
{
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 344 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 348 "lexer.l"
{ 
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentInteger);
    PrintIntegerLiteral("decimal", currentInteger); 
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 354 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 358 "lexer.l"
{ /* Binary integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 2);
    PrintIntegerLiteral("binary", currentInteger); 
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 365 "lexer.l"
{
    PrintError("illegal underscore in binary number", yylineno);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 370 "lexer.l"
{  /* Octal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 8);
    PrintIntegerLiteral("octal", currentInteger); 
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 377 "lexer.l"
{
    PrintError("illegal underscore in octal number", yylineno);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 382 "lexer.l"
{  /* Hexadecimal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 16);
    PrintIntegerLiteral("hexadecimal", currentInteger); 
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 389 "lexer.l"
{
    PrintError("illegal underscore in hexadecimal number", yylineno);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 394 "lexer.l"
{ Print("Found identifier: " + std::string{yytext}); }
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 397 "lexer.l"
{ /* ignoring */ }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 399 "lexer.l"
ECHO;
	YY_BREAK
#line 2205 "lexer.flex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 506 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 506 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 505);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 399 "lexer.l"


int main(int argc, char *argv[]) {
    if (argc < 2) {
        Print("Usage: %s <input_file>\n" + std::string{argv[0]});
        return 1;
    }

    FILE *input_file = fopen(argv[1], "r");
    if (!input_file) {
        PrintError("could not open file: " + std::string{argv[1]});
        return 1;
    }
    
	FILE* output_file = fopen("output.txt", "w");
	if (!output_file) {
		PrintError("could not create output file\n");
		fclose(input_file);
		return 1;
	}

    yyin = input_file;
    yyout = output_file;
    yylex();        

	fclose(input_file);
	fclose(output_file);
    return 0;
}

