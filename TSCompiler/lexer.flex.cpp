#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[540] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      180,  179,  178,   92,  131,  177,   77,  111,  150,  121,
      122,   85,   79,  126,   82,  127,  106,  162,  162,  125,
      129,  102,   89,   96,   73,  130,  119,  120,  108,  177,
      153,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  123,  115,  124,  110,  132,  148,  149,  179,
      151,  152,  154,  179,  156,  158,  179,  178,   93,  177,
       78,  113,  112,   86,   87,   81,   80,   84,   83,    0,
      166,  157,  161,  107,    0,    0,    0,    0,  163,  162,

      163,  104,  103,   90,   95,   97,   98,   74,   75,  109,
        0,  177,  177,  177,    3,  177,  177,  177,  177,  177,
      177,  177,   17,  177,  177,  177,  177,  177,  177,  177,
      177,  177,   28,  177,   31,   35,  177,  177,  177,  177,
      177,  177,  177,   45,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  116,  117,  132,  147,  139,  138,  135,  136,
      140,  141,  142,  143,  144,  145,  147,  146,  133,  151,
      154,  155,  158,  159,    0,  160,   94,  114,   88,  128,
      166,    0,  167,  161,  170,  168,  170,  173,  171,  173,

      176,  174,  174,  176,    0,    0,    0,  164,  162,    0,
      163,  163,  105,   91,   99,  100,   76,  167,  177,    2,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,   24,  177,  177,
       27,  177,  177,  177,  177,  177,   37,  177,  177,  177,
       41,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,   53,  177,  177,  177,  177,  177,  177,  177,  177,
       62,  177,  177,  177,  177,   68,  177,  177,  177,  177,
      118,  136,  137,    0,    0,  166,    0,    0,  167,  168,
      169,  169,  171,  172,  172,  174,  174,  175,  175,  175,

      175,    0,    0,    0,    0,    0,  164,    0,  165,    0,
      163,  163,  163,  101,  167,  167,  177,  177,  177,  177,
        7,  177,  177,  177,  177,  177,  177,  177,  177,   18,
       19,  177,  177,  177,  177,   25,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,   42,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,   59,  177,   61,   63,  177,  177,  177,   69,  177,
       71,  177,  136,  134,    0,  166,  167,    0,  167,  167,
      169,  169,  169,  172,  172,  172,  175,  175,  175,  175,
      175,  175,    0,  164,  165,    0,  165,  163,  163,  163,

      177,    4,  177,    6,    8,    9,   11,  177,  177,  177,
      177,  177,  177,  177,   22,  177,  177,  177,  177,   32,
      177,  177,   36,  177,  177,   40,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,   56,  177,  177,
       60,  177,  177,  177,  177,   70,   72,  167,  167,  167,
      169,  172,  175,  175,  165,  165,  165,  177,  177,  177,
      177,  177,  177,  177,   16,   20,  177,  177,  177,  177,
       30,  177,  177,   38,  177,   43,   44,  177,  177,  177,
       49,  177,  177,   52,   54,   55,   57,   58,   64,  177,
       66,  177,  167,  165,  177,    5,  177,  177,  177,   14,

       15,   21,   23,  177,  177,  177,  177,  177,   46,   47,
      177,  177,   51,  177,   67,    1,  177,   10,   13,   26,
      177,  177,  177,  177,  177,   50,  177,  177,  177,  177,
       34,   39,   48,   65,  177,   29,   33,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    1,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       23,   24,   23,   23,   23,   25,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   33,   35,   36,   33,
       37,   37,   37,    9,    9,    9,    9,    9,   38,    9,
        9,    9,   37,   37,    9,    9,    9,   39,    9,    9,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,    9,   71,   72,   73,   74,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    2,    3,    4,    2,    1,    5,    6,    1,
        1,    7,    8,    8,    9,    1,    8,    1,    1,    1,
       10,   11,   11,   10,   11,    1,    1,    1,    1,    1,
        1,    1,   11,   11,   10,   10,   12,    6,   12,    1,
       13,    1,    1,   14,   15,   11,   11,   11,   11,   11,
       11,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        8,    1,    8,    1
    } ;

static const flex_int16_t yy_base[560] =
    {   0,
        0,    0,   71,   73,   78,   80,   46,   48, 1247, 1246,
     1260, 1263,   91, 1230, 1263,    0, 1229,   69, 1263, 1263,
     1263,   71,   72, 1263,   81,   83,   96,   84,  111, 1263,
     1263,   98,  108,  110,   98, 1263, 1263, 1263, 1228,  101,
     1263,   95,   83,  101,   91,   91,  110, 1206,  116, 1205,
     1204, 1193,  116,   62,  106, 1202,  118,  124, 1192,  111,
      125, 1196, 1263,  120, 1263, 1263,    0, 1263, 1263,  193,
        0, 1263,    0, 1204, 1263,    0,  170,  203, 1219,    0,
     1263, 1218, 1263, 1217, 1263, 1263, 1263, 1263, 1263, 1226,
      199, 1263,    0, 1263,  204,  189,  224,  248,  266,  293,

      242, 1215, 1263, 1214, 1263, 1263,  170, 1263, 1213, 1263,
      253,  193, 1177, 1170,    0, 1193, 1178, 1187,  138, 1190,
     1176,  273,    0, 1170, 1167,  128, 1175, 1172, 1167, 1169,
     1169, 1162,    0, 1165,  190,    0, 1155, 1159, 1174, 1164,
      163,  181, 1166,    0, 1172,  159, 1172,  241, 1153,  190,
     1156, 1162, 1157,   61,  223, 1153,  253, 1150, 1158, 1157,
     1145, 1159, 1263, 1178,    0, 1263, 1263, 1263,  310,  317,
     1263, 1263, 1263, 1263, 1263, 1263,    0, 1263,    0,    0,
        0, 1263,    0,  307,  308, 1263, 1263, 1263, 1263, 1263,
      323,  333,  339,    0,  229,  344,  347,  357,  363,  371,

      394,  425, 1162,  456,  376,  378, 1158,  387,  474,  498,
      507,  443, 1263, 1263, 1263, 1172, 1263,  512, 1132,    0,
     1142, 1135, 1144, 1138, 1127, 1110,  215, 1107, 1103, 1113,
     1108, 1095, 1086, 1083, 1079, 1041, 1049,    0, 1022, 1026,
        0,  231, 1021, 1005, 1015,  997,    0,  990, 1005, 1001,
        0,  990,  999,  995,  926,  914,  915,  922,  929,  911,
      910,    0,  909,  919,  922,  906,  923,  905,  908,  916,
        0,  915,  908,  895,  891,    0,  900,  885,  888,  877,
     1263,  382, 1263,    0,  411,  542,  552,  566,  576,  464,
      517,  525,  571,  581,  585,    0,  889,  882,  874,  609,

      873,  528,  595,  865,  275,  625,  640,  650,  655,  665,
      679,  689,  697, 1263,  713,  722,  838,  830,  843,  821,
        0,  823,  811,  809,  818,  819,  824,  802,  783,    0,
        0,  781,  778,  769,  756,    0,  747,  755,  741,  740,
      755,  737,  745,  732,  701,  701,    0,  712,  713,  714,
      713,  706,  701,  688,  688,  677,  678,  672,  667,  680,
      667,    0,  658,    0,  664,  666,  641,  646,    0,  647,
        0,  647, 1263, 1263,  729,  746,  753,  758,  763,  770,
      537,  592,  777,  787,  794,  801,  651,  649,    0,  648,
      641,  638,  805,  811,  818,  829,  835,  842,  866,  875,

      624,    0,  621,    0,    0,    0,  591,  593,  599,  578,
      583,  588,  572,  586,    0,  571,  573,  566,  558,    0,
      563,  570,    0,  561,  524,    0,  520,  515,  527,  513,
      523,  512,  496,  491,  494,  504,  493,    0,  491,  484,
        0,  489,  473,  475,  449,    0,    0,  859,  883,  899,
      825,  891,  471,  469,  907,  915,  923,  464,  452,  443,
      435,  444,  438,  419,    0,    0,  419,  412,  410,  413,
        0,  409,  410,    0,  408,    0,    0,  403,  402,  386,
        0,  382,  388,    0,    0,    0,    0,    0,    0,  367,
        0,  366,  931,  939,  359,    0,  373,  364,  350,    0,

        0,    0,    0,  337,  331,  332,  328,  326,    0,    0,
      322,  280,    0,  292,    0,    0,  271,    0,    0,    0,
      243,  241,  240,  207,  193,    0,  183,  144,  127,  130,
        0,    0,    0,    0,  102,    0,    0,    0, 1263,  983,
      998, 1013, 1028, 1038, 1052, 1067, 1082, 1096, 1111, 1126,
     1141, 1156, 1171, 1179,  342, 1184, 1189,  360, 1194
    } ;

static const flex_int16_t yy_def[560] =
    {   0,
      539,    1,  540,  540,  541,  541,  542,  542,  543,  543,
      539,  539,  539,  539,  539,  544,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  544,
      539,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  539,  539,  539,  539,  545,  539,  539,  539,
      546,  539,  547,   70,  539,  548,  549,  539,  539,  544,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  550,  539,  539,  551,  552,  553,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  539,  539,  545,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  554,  539,  555,  546,
      547,  539,  548,  549,  549,  539,  539,  539,  539,  539,
      539,  539,  539,  550,  551,  539,  551,  552,  539,  552,

      553,  553,  556,  553,  539,  539,  557,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      539,  539,  539,  558,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  202,  556,  202,  556,  202,

      559,  539,  539,  557,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  300,  559,  300,  559,
      300,  559,  539,  539,  539,  539,  539,  539,  539,  539,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  539,  539,  539,
      539,  539,  300,  559,  539,  539,  539,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  539,  539,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,    0,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539
    } ;

static const flex_int16_t yy_nxt[1338] =
    {   0,
       12,   12,   13,   13,   13,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   29,   29,   29,   30,   31,   32,   33,   34,
       35,   36,   16,   16,   16,   16,   16,   16,   16,   37,
       12,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   16,   49,   16,   50,   51,   52,   53,   54,
       55,   16,   56,   57,   58,   59,   60,   61,   16,   62,
       63,   64,   65,   66,   68,   12,   68,   12,   69,   82,
       69,   68,   12,   68,   12,   84,   74,   86,   74,   72,
       75,   72,   75,   78,   78,   78,   78,   83,   88,   85,

       87,   90,   95,   91,   91,   91,   91,   91,  143,   89,
       92,   70,  144,   70,  268,   93,  108,   96,   70,  111,
       70,   97,   98,  269,   94,  102,  103,   99,  109,   95,
       96,  100,  100,  100,  100,  100,  104,  105,  106,  107,
      122,  113,  117,   97,  112,  118,  119,  124,  163,  125,
      123,  145,   98,  114,  101,  127,  158,  120,  115,  126,
      121,  140,  116,  128,  538,  141,  133,  149,  146,  129,
      159,  147,  130,  134,  135,  131,  154,  160,  161,  136,
      537,  142,  150,  151,  185,  152,  155,  153,  234,  186,
      536,  164,  235,  156,  166,  166,  166,  166,  215,  216,

      167,  224,  225,  535,  168,   78,   78,   78,   78,  196,
      196,  111,  256,  169,  170,  170,  170,  166,  257,  191,
      191,  191,  191,  191,   91,   91,   91,   91,   91,  250,
      251,  534,  197,  171,  192,  263,  112,  252,  253,  172,
      243,  533,  193,  173,  199,  199,  199,  199,  192,  539,
      539,  174,  264,  244,  245,  175,  532,  176,  177,  178,
      111,  179,  100,  100,  100,  100,  100,  200,  202,  203,
      203,  203,  203,  218,  218,  218,  218,  218,  324,  325,
      203,  203,  203,  203,  111,  212,  259,  338,  270,  531,
      339,  204,  271,  203,  203,  203,  203,  203,  203,  205,

      530,  273,  260,  206,  207,  261,  274,  529,  275,   99,
      310,  208,  205,  209,  209,  209,  209,  209,  305,  228,
      229,  539,  185,  230,  310,  206,  539,  186,  210,  231,
      282,  282,  282,  282,  207,  528,  211,  282,  282,  282,
      282,  527,  210,  191,  191,  191,  191,  191,  285,  526,
      285,  284,  284,  286,  286,  286,  286,  286,  192,  191,
      191,  191,  191,  191,  290,  290,  193,  292,  292,  374,
      374,  525,  192,  524,  288,  523,  287,  539,  539,  539,
      539,  522,  289,  293,  293,  293,  293,  291,  288,  521,
      197,  295,  295,  295,  295,  520,  292,  292,  295,  295,

      295,  295,  373,  373,  373,  373,  294,   91,   91,   91,
       91,   91,  519,  518,  200,  539,  539,  539,  539,  302,
      517,  303,  210,  516,  515,  514,  539,  539,  539,  539,
      305,  286,  286,  286,  286,  286,  210,  513,  512,  539,
      539,  539,  539,  539,  539,  296,  297,  297,  297,  297,
      511,  510,  509,  508,  375,  507,  506,  297,  297,  297,
      297,  111,  505,  312,  312,  312,  312,  312,  298,  504,
      297,  297,  297,  297,  297,  297,  300,  301,  301,  301,
      301,  503,  502,  501,  290,  290,  313,  500,  301,  301,
      301,  301,  208,  499,  209,  209,  209,  209,  209,  204,

      498,  301,  301,  301,  301,  301,  301,  291,  497,  210,
      496,  495,  454,  306,  453,  306,  492,  211,  307,  307,
      307,  307,  307,  210,  491,  309,  490,  209,  209,  209,
      209,  209,  315,  315,  315,  315,  315,  290,  290,  489,
      488,  308,  310,  487,  486,  382,  382,  288,  292,  292,
      311,  485,  484,  483,  482,  316,  310,  382,  382,  481,
      381,  288,  376,  376,  376,  376,  376,  378,  383,  378,
      480,  302,  379,  379,  379,  379,  379,  479,  478,  477,
      451,  378,  476,  378,  475,  377,  379,  379,  379,  379,
      379,  293,  293,  293,  293,  287,  315,  315,  315,  315,

      315,  293,  293,  293,  293,  385,  385,  385,  385,  287,
      474,  288,  382,  382,  294,  295,  295,  295,  295,  380,
      473,  472,  471,  470,  384,  288,  469,  468,  386,  389,
      390,  390,  390,  390,  467,  383,  466,  465,  303,  464,
      463,  390,  390,  390,  390,  307,  307,  307,  307,  307,
      462,  461,  391,  460,  390,  390,  390,  390,  390,  390,
      394,  394,  394,  394,  394,  396,  459,  396,  393,  458,
      397,  397,  397,  397,  397,  218,  218,  218,  218,  218,
      396,  388,  396,  395,  387,  397,  397,  397,  397,  397,
      310,  392,  454,  308,  453,  447,  446,  309,  305,  398,

      398,  398,  398,  398,  310,  445,  444,  309,  308,  398,
      398,  398,  398,  398,  310,  111,  443,  312,  312,  312,
      312,  312,  399,  442,  310,  441,  440,  439,  310,  438,
      437,  436,  400,  315,  315,  315,  315,  315,  310,  435,
      313,  434,  315,  315,  315,  315,  315,  433,  288,  379,
      379,  379,  379,  379,  432,  431,  316,  288,  430,  429,
      428,  427,  288,  426,  425,  289,  376,  376,  376,  376,
      376,  288,  375,  376,  376,  376,  376,  376,  379,  379,
      379,  379,  379,  449,  449,  449,  449,  449,  424,  377,
      315,  315,  315,  315,  315,  423,  448,  382,  382,  422,

      421,  375,  420,  419,  418,  288,  450,  385,  385,  385,
      385,  417,  416,  380,  385,  385,  385,  385,  415,  288,
      381,  385,  385,  385,  385,  397,  397,  397,  397,  397,
      452,  394,  394,  394,  394,  394,  414,  386,  394,  394,
      394,  394,  394,  413,  384,  382,  382,  412,  393,  397,
      397,  397,  397,  397,  395,  456,  456,  456,  456,  456,
      309,  455,  398,  398,  398,  398,  398,  411,  451,  410,
      409,  408,  393,  407,  406,  405,  404,  310,  457,  449,
      449,  449,  449,  449,  309,  400,  398,  398,  398,  398,
      398,  310,  403,  309,  402,  398,  398,  398,  398,  398,

      401,  310,  493,  449,  449,  449,  449,  449,  304,  399,
      310,  385,  385,  385,  385,  310,  392,  388,  311,  449,
      449,  449,  449,  449,  310,  387,  450,  456,  456,  456,
      456,  456,  299,  372,  452,  456,  456,  456,  456,  456,
      371,  370,  448,  456,  456,  456,  456,  456,  369,  368,
      494,  449,  449,  449,  449,  449,  367,  366,  457,  456,
      456,  456,  456,  456,  365,  364,  455,  363,  362,  361,
      360,  359,  358,  357,  493,  356,  355,  354,  353,  352,
      351,  350,  494,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   80,  349,  348,  347,   80,   80,   80,
      346,   80,  165,  165,  345,  344,  343,  165,  165,  165,
      165,  165,  165,  165,  342,  165,  165,  180,  180,  341,
      340,  180,  180,  337,  180,  180,  180,  180,  180,  336,
      180,  180,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  335,  181,  183,  183,  183,  183,

      183,  183,  183,  183,  334,  183,  183,  183,  183,  183,
      183,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  194,  194,  333,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  195,  332,  331,  330,  195,  195,  195,  195,  195,
      195,  195,  195,  195,  195,  195,  198,  329,  328,  327,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  201,  326,  323,  322,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  283,  321,  283,  320,
      283,  319,  283,  297,  297,  318,  317,  297,  301,  301,

      314,  304,  301,  390,  390,  299,  281,  390,  280,  279,
      278,  277,  276,  272,  267,  266,  265,  262,  258,  255,
      254,  249,  248,  247,  246,  242,  241,  240,  239,  238,
      237,  236,  233,  232,  227,  226,  223,  222,  221,  220,
      219,  217,  214,  213,  190,  189,  188,  187,  182,  162,
      157,  148,  139,  138,  137,  132,  110,   81,   79,  539,
       77,   77,   11,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539
    } ;

static const flex_int16_t yy_chk[1338] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,    3,   18,
        4,    5,    5,    6,    6,   22,    7,   23,    8,    5,
        7,    6,    8,   13,   13,   13,   13,   18,   25,   22,

       23,   26,   28,   26,   26,   26,   26,   26,   54,   25,
       27,    3,   54,    4,  154,   27,   35,   28,    5,   40,
        6,   28,   28,  154,   27,   32,   32,   28,   35,   29,
       28,   29,   29,   29,   29,   29,   33,   33,   34,   34,
       45,   42,   43,   28,   40,   43,   44,   46,   64,   46,
       45,   55,   28,   42,   29,   47,   60,   44,   42,   46,
       44,   53,   42,   47,  535,   53,   49,   57,   55,   47,
       60,   55,   47,   49,   49,   47,   58,   61,   61,   49,
      530,   53,   57,   57,   77,   57,   58,   57,  126,   77,
      529,   64,  126,   58,   70,   70,   70,   70,  107,  107,

       70,  119,  119,  528,   70,   78,   78,   78,   78,   96,
       96,  112,  146,   70,   70,   70,   70,   70,  146,   91,
       91,   91,   91,   91,   95,   95,   95,   95,   95,  141,
      141,  527,   96,   70,   91,  150,  112,  142,  142,   70,
      135,  525,   91,   70,   97,   97,   97,   97,   91,  195,
      195,   70,  150,  135,  135,   70,  524,   70,   70,   70,
      101,   70,  101,  101,  101,  101,  101,   97,   98,   98,
       98,   98,   98,  111,  111,  111,  111,  111,  227,  227,
       98,   98,   98,   98,   99,  101,  148,  242,  155,  523,
      242,   98,  155,   98,   98,   98,   98,   98,   98,   99,

      522,  157,  148,   99,   99,  148,  157,  521,  157,   99,
      305,  100,   99,  100,  100,  100,  100,  100,  305,  122,
      122,  184,  185,  122,  305,   99,  184,  185,  100,  122,
      169,  169,  169,  169,   99,  517,  100,  170,  170,  170,
      170,  514,  100,  191,  191,  191,  191,  191,  192,  512,
      192,  555,  555,  192,  192,  192,  192,  192,  191,  193,
      193,  193,  193,  193,  196,  196,  191,  197,  197,  558,
      558,  511,  191,  508,  193,  507,  192,  198,  198,  198,
      198,  506,  193,  199,  199,  199,  199,  196,  193,  505,
      197,  200,  200,  200,  200,  504,  205,  205,  206,  206,

      206,  206,  282,  282,  282,  282,  199,  208,  208,  208,
      208,  208,  499,  498,  200,  201,  201,  201,  201,  205,
      497,  206,  208,  495,  492,  490,  201,  201,  201,  201,
      208,  285,  285,  285,  285,  285,  208,  483,  482,  201,
      201,  201,  201,  201,  201,  202,  202,  202,  202,  202,
      480,  479,  478,  475,  285,  473,  472,  202,  202,  202,
      202,  212,  470,  212,  212,  212,  212,  212,  202,  469,
      202,  202,  202,  202,  202,  202,  204,  204,  204,  204,
      204,  468,  467,  464,  290,  290,  212,  463,  204,  204,
      204,  204,  209,  462,  209,  209,  209,  209,  209,  204,

      461,  204,  204,  204,  204,  204,  204,  290,  460,  209,
      459,  458,  454,  210,  453,  210,  445,  209,  210,  210,
      210,  210,  210,  209,  444,  211,  443,  211,  211,  211,
      211,  211,  218,  218,  218,  218,  218,  291,  291,  442,
      440,  210,  211,  439,  437,  292,  292,  218,  302,  302,
      211,  436,  435,  434,  433,  218,  211,  381,  381,  432,
      291,  218,  286,  286,  286,  286,  286,  287,  292,  287,
      431,  302,  287,  287,  287,  287,  287,  430,  429,  428,
      381,  288,  427,  288,  425,  286,  288,  288,  288,  288,
      288,  293,  293,  293,  293,  287,  289,  289,  289,  289,

      289,  294,  294,  294,  294,  295,  295,  295,  295,  288,
      424,  289,  382,  382,  293,  303,  303,  303,  303,  289,
      422,  421,  419,  418,  294,  289,  417,  416,  295,  300,
      300,  300,  300,  300,  414,  382,  413,  412,  303,  411,
      410,  300,  300,  300,  300,  306,  306,  306,  306,  306,
      409,  408,  300,  407,  300,  300,  300,  300,  300,  300,
      307,  307,  307,  307,  307,  308,  403,  308,  306,  401,
      308,  308,  308,  308,  308,  309,  309,  309,  309,  309,
      310,  392,  310,  307,  391,  310,  310,  310,  310,  310,
      309,  390,  388,  308,  387,  372,  370,  311,  309,  311,

      311,  311,  311,  311,  309,  368,  367,  312,  310,  312,
      312,  312,  312,  312,  311,  313,  366,  313,  313,  313,
      313,  313,  311,  365,  312,  363,  361,  360,  311,  359,
      358,  357,  312,  315,  315,  315,  315,  315,  312,  356,
      313,  355,  316,  316,  316,  316,  316,  354,  315,  375,
      375,  375,  375,  375,  353,  352,  315,  316,  351,  350,
      349,  348,  315,  346,  345,  316,  376,  376,  376,  376,
      376,  316,  375,  377,  377,  377,  377,  377,  378,  378,
      378,  378,  378,  379,  379,  379,  379,  379,  344,  376,
      380,  380,  380,  380,  380,  343,  377,  383,  383,  342,

      341,  378,  340,  339,  338,  380,  379,  384,  384,  384,
      384,  337,  335,  380,  385,  385,  385,  385,  334,  380,
      383,  386,  386,  386,  386,  393,  393,  393,  393,  393,
      384,  394,  394,  394,  394,  394,  333,  385,  395,  395,
      395,  395,  395,  332,  386,  451,  451,  329,  393,  396,
      396,  396,  396,  396,  394,  397,  397,  397,  397,  397,
      398,  395,  398,  398,  398,  398,  398,  328,  451,  327,
      326,  325,  396,  324,  323,  322,  320,  398,  397,  448,
      448,  448,  448,  448,  399,  398,  399,  399,  399,  399,
      399,  398,  319,  400,  318,  400,  400,  400,  400,  400,

      317,  399,  448,  449,  449,  449,  449,  449,  304,  399,
      400,  452,  452,  452,  452,  399,  301,  299,  400,  450,
      450,  450,  450,  450,  400,  298,  449,  455,  455,  455,
      455,  455,  297,  280,  452,  456,  456,  456,  456,  456,
      279,  278,  450,  457,  457,  457,  457,  457,  277,  275,
      455,  493,  493,  493,  493,  493,  274,  273,  456,  494,
      494,  494,  494,  494,  272,  270,  457,  269,  268,  267,
      266,  265,  264,  263,  493,  261,  260,  259,  258,  257,
      256,  255,  494,  540,  540,  540,  540,  540,  540,  540,
      540,  540,  540,  540,  540,  540,  540,  540,  541,  541,

      541,  541,  541,  541,  541,  541,  541,  541,  541,  541,
      541,  541,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  544,  254,  253,  252,  544,  544,  544,
      250,  544,  545,  545,  249,  248,  246,  545,  545,  545,
      545,  545,  545,  545,  245,  545,  545,  546,  546,  244,
      243,  546,  546,  240,  546,  546,  546,  546,  546,  239,
      546,  546,  547,  547,  547,  547,  547,  547,  547,  547,
      547,  547,  547,  547,  237,  547,  548,  548,  548,  548,

      548,  548,  548,  548,  236,  548,  548,  548,  548,  548,
      548,  549,  549,  549,  549,  549,  549,  549,  549,  549,
      549,  549,  549,  549,  549,  549,  550,  550,  235,  550,
      550,  550,  550,  550,  550,  550,  550,  550,  550,  550,
      550,  551,  234,  233,  232,  551,  551,  551,  551,  551,
      551,  551,  551,  551,  551,  551,  552,  231,  230,  229,
      552,  552,  552,  552,  552,  552,  552,  552,  552,  552,
      552,  553,  228,  226,  225,  553,  553,  553,  553,  553,
      553,  553,  553,  553,  553,  553,  554,  224,  554,  223,
      554,  222,  554,  556,  556,  221,  219,  556,  557,  557,

      216,  207,  557,  559,  559,  203,  164,  559,  162,  161,
      160,  159,  158,  156,  153,  152,  151,  149,  147,  145,
      143,  140,  139,  138,  137,  134,  132,  131,  130,  129,
      128,  127,  125,  124,  121,  120,  118,  117,  116,  114,
      113,  109,  104,  102,   90,   84,   82,   79,   74,   62,
       59,   56,   52,   51,   50,   48,   39,   17,   14,   11,
       10,    9,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[180] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "lexer.l"
#line 6 "lexer.l"

#include <algorithm>
#include <charconv>
#include <cstdio>
#include <iostream>
#include <string>


void Print(const std::string& message) {
    std::cout << message << std::endl;
}

void PrintError(const std::string& errorMessage, const int line = -1) {
    std::cerr << "error: " << errorMessage << std::endl;
    if (line >= 0)
        std::cerr << "error line: " << line << std::endl;
    std::cerr << std::endl;
}

void PrintIntegerLiteral(const std::string& type, const int integer) {
    Print("Found " + type + " integer literal: " + std::to_string(integer));
}

void PrintFloatingPointLiteral(const double floatingPoint) {
    Print("Found floating point literal: " + std::to_string(floatingPoint));
}

void PrintStringLiteral(const std::string& literal) {
    Print("Found string literal: \"" + literal + "\"");
}

void RemoveCharacterFromString(std::string& str, char ch) {
    const auto newLast = std::remove(str.begin(), str.end(), ch);
    str.erase(newLast, str.end());
}

void RemoveUnderline(std::string& str) {
    RemoveCharacterFromString(str, '_');
}

#line 1000 "lexer.flex.cpp"

#line 1002 "lexer.flex.cpp"

#define INITIAL 0
#define DOUBLE_STR 1
#define SINGLE_STR 2
#define TEMPLATE_STR 3
#define MULTILINE_COMMENT 4

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 81 "lexer.l"




#line 86 "lexer.l"
std::string currentString;
std::string currentComment;

int currentInteger;
double currentFloatingPoint;

char buffer[10];    



#line 1236 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 540 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 539 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 96 "lexer.l"
{ Print("Found KW_ABSTRACT: " + std::string{yytext}); } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 97 "lexer.l"
{ Print("Found TYPE_ANY: " + std::string{yytext}); } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 98 "lexer.l"
{ Print("Found KW_AS: " + std::string{yytext}); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 99 "lexer.l"
{ Print("Found KW_AWAIT: " + std::string{yytext}); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 100 "lexer.l"
{ Print("Found TYPE_BOOLEAN: " + std::string{yytext}); } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 101 "lexer.l"
{ Print("Found KW_BREAK: " + std::string{yytext}); } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 102 "lexer.l"
{ Print("Found KW_CASE: " + std::string{yytext}); } 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 103 "lexer.l"
{ Print("Found KW_CATCH: " + std::string{yytext}); } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 104 "lexer.l"
{ Print("Found KW_CLASS: " + std::string{yytext}); } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 105 "lexer.l"
{ Print("Found KW_CONTINUE: " + std::string{yytext}); } 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 106 "lexer.l"
{ Print("Found KW_CONST: " + std::string{yytext}); } 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 107 "lexer.l"
{ Print("Found KW_CONSTRUCTOR: " + std::string{yytext}); } 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 108 "lexer.l"
{ Print("Found KW_DEBUGGER: " + std::string{yytext}); } 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 109 "lexer.l"
{ Print("Found KW_DECLARE: " + std::string{yytext}); } 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 110 "lexer.l"
{ Print("Found KW_DEFAULT: " + std::string{yytext}); } 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 111 "lexer.l"
{ Print("Found KW_DELETE: " + std::string{yytext}); } 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 112 "lexer.l"
{ Print("Found KW_DO: " + std::string{yytext}); } 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 113 "lexer.l"
{ Print("Found KW_ELSE: " + std::string{yytext}); } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 114 "lexer.l"
{ Print("Found KW_ENUM: " + std::string{yytext}); } 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 115 "lexer.l"
{ Print("Found KW_EXPORT: " + std::string{yytext}); } 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 116 "lexer.l"
{ Print("Found KW_EXTENDS: " + std::string{yytext}); } 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 117 "lexer.l"
{ Print("Found KW_FALSE: " + std::string{yytext}); } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 118 "lexer.l"
{ Print("Found KW_FINALLY: " + std::string{yytext}); } 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 119 "lexer.l"
{ Print("Found KW_FOR: " + std::string{yytext}); } 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 120 "lexer.l"
{ Print("Found KW_FROM: " + std::string{yytext}); } 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 121 "lexer.l"
{ Print("Found KW_FUNCTION: " + std::string{yytext}); } 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 122 "lexer.l"
{ Print("Found KW_GET: " + std::string{yytext}); } 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 123 "lexer.l"
{ Print("Found KW_IF: " + std::string{yytext}); } 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 124 "lexer.l"
{ Print("Found KW_IMPLEMENTS: " + std::string{yytext}); } 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 125 "lexer.l"
{ Print("Found KW_IMPORT: " + std::string{yytext}); } 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 126 "lexer.l"
{ Print("Found KW_IN: " + std::string{yytext}); } 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 127 "lexer.l"
{ Print("Found KW_INFER: " + std::string{yytext}); } 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 128 "lexer.l"
{ Print("Found KW_INSTANCEOF: " + std::string{yytext}); } 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 129 "lexer.l"
{ Print("Found KW_INTARFACE: " + std::string{yytext}); } 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 130 "lexer.l"
{ Print("Found KW_IS: " + std::string{yytext}); } 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 131 "lexer.l"
{ Print("Found KW_KEYOF: " + std::string{yytext}); } 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 132 "lexer.l"
{ Print("Found KW_LET: " + std::string{yytext}); } 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 133 "lexer.l"
{ Print("Found KW_MODULE: " + std::string{yytext}); } 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 134 "lexer.l"
{ Print("Found KW_NAMESPACE: " + std::string{yytext}); } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 135 "lexer.l"
{ Print("Found TYPE_NEVER: " + std::string{yytext}); } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 136 "lexer.l"
{ Print("Found KW_NEW: " + std::string{yytext}); } 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 137 "lexer.l"
{ Print("Found KW_NULL: " + std::string{yytext}); } 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 138 "lexer.l"
{ Print("Found TYPE_NUMBER: " + std::string{yytext}); } 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 139 "lexer.l"
{ Print("Found TYPE_OBJECT: " + std::string{yytext}); } 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 140 "lexer.l"
{ Print("Found KW_OF: " + std::string{yytext}); } 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 141 "lexer.l"
{ Print("Found KW_PACKAGE: " + std::string{yytext}); } 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 142 "lexer.l"
{ Print("Found KW_PRIVATE: " + std::string{yytext}); } 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 143 "lexer.l"
{ Print("Found KW_PROTECTED: " + std::string{yytext}); } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 144 "lexer.l"
{ Print("Found KW_PUBLIC: " + std::string{yytext}); } 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 145 "lexer.l"
{ Print("Found KW_READONLY: " + std::string{yytext}); } 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 146 "lexer.l"
{ Print("Found KW_REQUIRE: " + std::string{yytext}); } 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 147 "lexer.l"
{ Print("Found KW_RETURN: " + std::string{yytext}); } 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 148 "lexer.l"
{ Print("Found KW_SET: " + std::string{yytext}); } 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 149 "lexer.l"
{ Print("Found KW_STATIC: " + std::string{yytext}); } 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 150 "lexer.l"
{ Print("Found TYPE_STRING: " + std::string{yytext}); } 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 151 "lexer.l"
{ Print("Found KW_SUPER: " + std::string{yytext}); } 
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 152 "lexer.l"
{ Print("Found KW_SWITCH: " + std::string{yytext}); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 153 "lexer.l"
{ Print("Found TYPE_SYMBOL: " + std::string{yytext}); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 154 "lexer.l"
{ Print("Found KW_THIS: " + std::string{yytext}); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 155 "lexer.l"
{ Print("Found KW_THROW: " + std::string{yytext}); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 156 "lexer.l"
{ Print("Found KW_TRUE: " + std::string{yytext}); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 157 "lexer.l"
{ Print("Found KW_TRY: " + std::string{yytext}); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 158 "lexer.l"
{ Print("Found KW_TYPE: " + std::string{yytext}); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 159 "lexer.l"
{ Print("Found KW_TYPEOF: " + std::string{yytext}); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 160 "lexer.l"
{ Print("Found KW_UNDEFINED: " + std::string{yytext}); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 161 "lexer.l"
{ Print("Found KW_UNIQUE: " + std::string{yytext}); } 
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 162 "lexer.l"
{ Print("Found TYPE_UNKNOWN: " + std::string{yytext}); } 
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 163 "lexer.l"
{ Print("Found KW_VAR: " + std::string{yytext}); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 164 "lexer.l"
{ Print("Found VOID_OPERATOR: " + std::string{yytext}); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 165 "lexer.l"
{ Print("Found KW_WHILE: " + std::string{yytext}); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 166 "lexer.l"
{ Print("Found KW_WITH: " + std::string{yytext}); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 167 "lexer.l"
{ Print("Found KW_YIELD: " + std::string{yytext}); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 169 "lexer.l"
{ Print("Found QUESTION_MARK: " + std::string{yytext}); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 170 "lexer.l"
{ Print("Found OPTIONAL_CHAINING_OPERATOR: " + std::string{yytext}); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 171 "lexer.l"
{ Print("Found OPERATOR_NULLISH_COALESCING: " + std::string{yytext}); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 172 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_NULLISH_COALESCING: " + std::string{yytext}); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 174 "lexer.l"
{ Print("Found OPERATOR_MOD: " + std::string{yytext}); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 175 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_MOD: " + std::string{yytext}); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 177 "lexer.l"
{ Print("Found OPERATOR_PLUS: " + std::string{yytext}); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 178 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_PLUS: " + std::string{yytext}); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 179 "lexer.l"
{ Print("Found OPERATOR_INCREMENT: " + std::string{yytext}); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 181 "lexer.l"
{ Print("Found OPERATOR_MINUS: " + std::string{yytext}); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 182 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_MINUS: " + std::string{yytext}); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 183 "lexer.l"
{ Print("Found OPERATOR_DECREMENT: " + std::string{yytext}); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 185 "lexer.l"
{ Print("Found OPERATOR_MULTIPLY: " + std::string{yytext}); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 186 "lexer.l"
{ Print("Found OPERATOR_POWER: " + std::string{yytext}); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 187 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_MULTIPLY: " + std::string{yytext}); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 188 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_POWER: " + std::string{yytext}); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 190 "lexer.l"
{ Print("Found OPERATOR_ASSIGN: " + std::string{yytext}); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 191 "lexer.l"
{ Print("Found OPERATOR_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 192 "lexer.l"
{ Print("Found OPERATOR_STRICT_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 194 "lexer.l"
{ Print("Found OPERATOR_NOT: " + std::string{yytext}); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 195 "lexer.l"
{ Print("Found OPERATOR_NOT_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 196 "lexer.l"
{ Print("Found OPERATOR_STRICT_NOT_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 198 "lexer.l"
{ Print("Found ARROW_FUNCTION: " + std::string{yytext}); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 200 "lexer.l"
{ Print("Found OPERATOR_GREATER_THAN: " + std::string{yytext}); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 201 "lexer.l"
{ Print("Found OPERATOR_GREATER_THAN_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 202 "lexer.l"
{ Print("Found OPERATOR_SHIFT_RIGHT: " + std::string{yytext}); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 203 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_SHIFT_RIGHT: " + std::string{yytext}); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 204 "lexer.l"
{ Print("Found OPERATOR_UNSIGNED_SHIFT_RIGHT: " + std::string{yytext}); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 205 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_UNSIGNED_SHIFT_RIGHT: " + std::string{yytext}); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 207 "lexer.l"
{ Print("Found OPERATOR_LESS_THAN: " + std::string{yytext}); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 208 "lexer.l"
{ Print("Found OPERATOR_LESS_THAN_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 209 "lexer.l"
{ Print("Found OPERATOR_SHIFT_LEFT: " + std::string{yytext}); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 210 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_SHIFT_LEFT: " + std::string{yytext}); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 212 "lexer.l"
{ Print("Found OPERATOR_DIVIDE: " + std::string{yytext}); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 213 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_DIVIDE: " + std::string{yytext}); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 215 "lexer.l"
{ Print("Found OPERATOR_BITWISE_XOR: " + std::string{yytext}); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 216 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_BITWISE_XOR: " + std::string{yytext}); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 218 "lexer.l"
{ Print("Found OPERATOR_BITWISE_NOT: " + std::string{yytext}); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 220 "lexer.l"
{ Print("Found OPERATOR_BITWISE_AND: " + std::string{yytext}); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 221 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_BITWISE_AND: " + std::string{yytext}); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 222 "lexer.l"
{ Print("Found OPERATOR_LOGICAL_AND: " + std::string{yytext}); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 223 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_LOGICAL_AND: " + std::string{yytext}); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 225 "lexer.l"
{ Print("Found OPERATOR_BITWISE_OR: " + std::string{yytext}); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 226 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_BITWISE_OR: " + std::string{yytext}); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 227 "lexer.l"
{ Print("Found OPERATOR_LOGICAL_OR: " + std::string{yytext}); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 228 "lexer.l"
{ Print("Found OPERATOR_ASSIGN_LOGICAL_OR: " + std::string{yytext}); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 230 "lexer.l"
{ Print("Found BRACKET_OPEN: " + std::string{yytext}); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 231 "lexer.l"
{ Print("Found BRACKET_CLOSE: " + std::string{yytext}); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 232 "lexer.l"
{ Print("Found PARENTHESIS_OPEN: " + std::string{yytext}); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 233 "lexer.l"
{ Print("Found PARENTHESIS_CLOSE: " + std::string{yytext}); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 234 "lexer.l"
{ Print("Found BRACE_OPEN: " + std::string{yytext}); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 235 "lexer.l"
{ Print("Found BRACE_CLOSE: " + std::string{yytext}); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 237 "lexer.l"
{ Print("Found COLON: " + std::string{yytext}); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 238 "lexer.l"
{ Print("Found COMMA: " + std::string{yytext}); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 239 "lexer.l"
{ Print("Found DOT: " + std::string{yytext}); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 240 "lexer.l"
{ Print("Found DOTS_ELLIPSIS: " + std::string{yytext}); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 241 "lexer.l"
{ Print("Found SEMICOLON: " + std::string{yytext}); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 243 "lexer.l"
{ Print("Found DECORATOR_AT: " + std::string{yytext}); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 246 "lexer.l"
{
    currentString.clear();
    BEGIN(DOUBLE_STR);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 250 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 253 "lexer.l"
{
    PrintError("invalid hexadecimal escape sequence", yylineno);
}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 256 "lexer.l"
{
    std::fill(std::begin(buffer), std::end(buffer), 0);
    std::copy(yytext, yytext + yyleng, buffer);
    std::sscanf(buffer + 2, "%x", &currentInteger);
    currentString += static_cast<char>(currentInteger);
}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 262 "lexer.l"
{
    currentString += "\0";
}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 265 "lexer.l"
{
    PrintError("octal escape sequence not allowed", yylineno);
}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 268 "lexer.l"
{
    PrintError("unicode escape sequence is not supported yet", yylineno);
}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 271 "lexer.l"
{
    currentString += "\'";
}
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 274 "lexer.l"
{
    currentString += "\"";
}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 277 "lexer.l"
{
    currentString += "\\";
}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 280 "lexer.l"
{
    currentString += "\b";
}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 283 "lexer.l"
{
    currentString += "\f";
}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 286 "lexer.l"
{
    currentString += "\n";
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 289 "lexer.l"
{
    currentString += "\r";
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 292 "lexer.l"
{
    currentString += "\t";
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 295 "lexer.l"
{
    currentString += "\v";
}
	YY_BREAK
case 147:
/* rule 147 can match eol */
YY_RULE_SETUP
#line 298 "lexer.l"
{
    PrintError("invalid escape character", yylineno);
}
	YY_BREAK
case 148:
/* rule 148 can match eol */
YY_RULE_SETUP
#line 301 "lexer.l"
{
    PrintError("unexpected appearing \n in end of a line", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(DOUBLE_STR):
case YY_STATE_EOF(SINGLE_STR):
case YY_STATE_EOF(TEMPLATE_STR):
#line 305 "lexer.l"
{
    PrintError("unexpected appearing <<EOF>> in string literal", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 309 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 314 "lexer.l"
{
    currentString.clear();
    BEGIN(SINGLE_STR);
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 318 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 321 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 326 "lexer.l"
{
    currentString.clear();
    BEGIN(TEMPLATE_STR);
}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 330 "lexer.l"
{
    currentString += yytext;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 333 "lexer.l"
{
    currentString += "\`";
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 336 "lexer.l"
{
    PrintStringLiteral(currentString);
    BEGIN(INITIAL);
}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 342 "lexer.l"
{
    currentComment.clear();
    BEGIN(MULTILINE_COMMENT);
}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 346 "lexer.l"
{
    currentComment += yytext;
}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 349 "lexer.l"
{
    currentComment += yytext;
}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 352 "lexer.l"
{
    Print("Found multiline comment: \n" + currentComment);
    BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 356 "lexer.l"
{
    PrintError("no closing */ of multiline comment", yylineno);
    BEGIN(INITIAL);
}
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 361 "lexer.l"
{ 
    Print("Found singleline comment: " + std::string{yytext + 2}); 
}
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 365 "lexer.l"
{ 
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentInteger);
    PrintIntegerLiteral("decimal", currentInteger); 
}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 371 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 375 "lexer.l"
{ /* Decimal literal */
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 381 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 385 "lexer.l"
{
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 391 "lexer.l"
{
    PrintError("illegal underscore in decimal number", yylineno);
}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 396 "lexer.l"
{ /* Binary integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 2);
    PrintIntegerLiteral("binary", currentInteger); 
}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 403 "lexer.l"
{
    PrintError("illegal underscore in binary number", yylineno);
}
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 406 "lexer.l"
{
    PrintError("binary digit expected", yylineno);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 411 "lexer.l"
{  /* Octal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 8);
    PrintIntegerLiteral("octal", currentInteger); 
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 418 "lexer.l"
{
    PrintError("illegal underscore in octal number", yylineno);
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 421 "lexer.l"
{
    PrintError("octal digit expected", yylineno);
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 426 "lexer.l"
{  /* Hexadecimal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 16);
    PrintIntegerLiteral("hexadecimal", currentInteger); 
}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 433 "lexer.l"
{
    PrintError("illegal underscore in hexadecimal number", yylineno);
}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 436 "lexer.l"
{
    PrintError("hexadecimal digit expected", yylineno);
}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 441 "lexer.l"
{ Print("Found identifier: " + std::string{yytext}); }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 444 "lexer.l"
{ /* ignoring */ }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 446 "lexer.l"
ECHO;
	YY_BREAK
#line 2341 "lexer.flex.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 540 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 540 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 539);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 446 "lexer.l"


int main(int argc, char *argv[]) {
    if (argc < 2) {
        Print("Usage: %s <input_file>\n" + std::string{argv[0]});
        return 1;
    }

    FILE *input_file = fopen(argv[1], "r");
    if (!input_file) {
        PrintError("could not open file: " + std::string{argv[1]});
        return 1;
    }
    
	FILE* output_file = fopen("output.txt", "w");
	if (!output_file) {
		PrintError("could not create output file\n");
		fclose(input_file);
		return 1;
	}

    yyin = input_file;
    yyout = output_file;
    yylex();        

	fclose(input_file);
	fclose(output_file);
    return 0;
}

