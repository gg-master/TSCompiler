#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 117
#define YY_END_OF_BUFFER 118
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[393] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  118,  116,   83,   70,   94,  100,
      101,   78,   72,  105,   75,  106,   90,  109,  116,  104,
      107,   88,   80,   86,   69,  115,   98,   99,   92,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      108,  115,  115,  115,  115,  115,  115,  115,  115,  102,
       96,  103,   93,  117,   84,   71,   95,   79,   74,   73,
       77,   76,   91,    0,    0,    0,    0,  111,    0,   89,
       81,   87,  115,  115,  115,  115,    3,  115,  115,  115,
      115,  115,  115,   16,  115,  115,  115,  115,  115,  115,

      115,  115,  115,   27,  115,   30,   34,  115,  115,  115,
      115,  115,  115,  115,   44,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       97,   85,  112,    0,  110,  113,  114,  109,  111,    0,
        0,   82,  115,    2,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       23,  115,  115,   26,  115,  115,  115,  115,  115,   36,
      115,  115,  115,   40,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   52,  115,  115,  115,  115,  115,
      115,  115,  115,   61,  115,  115,  115,  115,   66,  115,

      112,    0,  110,    0,  113,    0,  114,    0,    0,    0,
      109,  115,  115,  115,    6,  115,  115,  115,  115,  115,
      115,  115,  115,   17,   18,  115,  115,  115,  115,   24,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
       41,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,   58,  115,   60,   62,  115,
      115,  115,  115,    0,    0,  109,    0,  115,  115,    5,
        7,    8,   10,  115,  115,  115,  115,  115,  115,  115,
       21,  115,  115,  115,  115,   31,  115,  115,   35,  115,
      115,   39,  115,  115,  115,  115,  115,  115,  115,  115,

      115,  115,  115,   55,  115,  115,   59,  115,  115,  115,
      115,   67,  115,  115,  115,  115,  115,  115,  115,   15,
       19,  115,  115,  115,  115,   29,  115,  115,   37,  115,
       42,   43,  115,  115,  115,   48,  115,  115,   51,   53,
       54,   56,   57,   63,  115,   64,  115,  115,    4,  115,
      115,  115,   13,   14,   20,   22,  115,  115,  115,  115,
      115,   45,   46,  115,  115,   50,  115,   65,    1,  115,
        9,   12,   25,  115,  115,  115,  115,  115,   49,  115,
      115,  115,  115,   33,   38,   47,   68,  115,   28,   32,
       11,    0

    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    1,    1,    4,    5,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
       16,   16,   16,   16,   16,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   25,   24,   24,   26,   24,
       27,   27,   27,   27,   27,   27,   27,   27,   28,   27,
       27,   27,   27,   27,   27,   27,   27,   29,   27,   27,
       30,    1,   31,   32,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   27,   59,   60,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    1,    2,    2,    2,    3,    3,    3,    1,
        1,    1,    4,    2,    2,    2,    2,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[398] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  192, 2170,  154,  148,  163, 2170,
     2170,  145,   54, 2170,   53, 2170,  144,   41,   66, 2170,
     2170,  141,  139,  136, 2170,   70, 2170, 2170, 2170,   76,
       86,   90,   98,  102,  116,  125,  137,  157,  163,  171,
      156,  109,  157,  174,  176,  192,   26,  201,  210, 2170,
       83, 2170, 2170, 2170,  108, 2170, 2170, 2170, 2170, 2170,
     2170, 2170, 2170,   80,  249,   94,    0,  255,  259, 2170,
      104, 2170,    0,  238,  240,  250,  252,  264,  267,  276,
      286,  288,  306,  297,  308,  317,  326,  335,  337,  346,

      355,  365,  367,  369,  379,  383,  393,  395,  404,  415,
      419,  429,  441,  431,  443,  455,  458,  464,  474,  476,
      483,  493,  502,  504,  504,  509,  522,  533,  537,  548,
     2170, 2170,  112,  582,  587,  577,   55,  591,  597,  610,
      617, 2170,  597,  599,  608,  618,  620,  632,  630,  634,
      644,  654,  658,  656,  673,  670,  682,  685,  694,  704,
      706,  708,  723,  725,  734,  745,  748,  760,  757,  769,
      771,  781,  791,  793,  802,  811,  813,  822,  825,  836,
      839,  853,  855,  864,  867,  876,  878,  888,  892,  902,
      904,  913,  924,  927,  939,  942,  951,  953,  963,  967,

      167,   82, 1006,  625,  752,  106,   44,   38, 1010,  881,
     1014,  994, 1011, 1015, 1025, 1027, 1036, 1039, 1048, 1057,
     1059, 1068, 1071, 1080, 1082, 1091, 1094, 1106, 1109, 1118,
     1120, 1130, 1132, 1141, 1151, 1155, 1165, 1169, 1179, 1181,
     1183, 1198, 1202, 1200, 1217, 1219, 1228, 1237, 1240, 1249,
     1251, 1260, 1263, 1272, 1274, 1284, 1286, 1288, 1298, 1302,
     1312, 1321, 1324, 1363, 1245, 1367, 1371, 1356, 1358, 1360,
     1370, 1372, 1374, 1384, 1388, 1398, 1407, 1409, 1418, 1421,
     1430, 1433, 1442, 1444, 1453, 1456, 1465, 1468, 1477, 1480,
     1489, 1498, 1500, 1509, 1518, 1520, 1532, 1541, 1543, 1552,

     1555, 1569, 1571, 1567, 1581, 1585, 1595, 1597, 1606, 1616,
     1618, 1620, 1637, 1639, 1641, 1651, 1661, 1663, 1665, 1675,
     1677, 1686, 1689, 1698, 1710, 1712, 1724, 1727, 1736, 1738,
     1747, 1750, 1762, 1765, 1774, 1776, 1785, 1795, 1797, 1799,
     1809, 1811, 1813, 1823, 1825, 1827, 1837, 1839, 1841, 1858,
     1860, 1862, 1872, 1876, 1886, 1888, 1890, 1900, 1910, 1914,
     1928, 1924, 1926, 1943, 1940, 1954, 1958, 1968, 1970, 1972,
     1982, 1984, 1993, 1996, 2005, 2008, 2020, 2024, 2034, 2038,
     2048, 2052, 2062, 2064, 2066, 2076, 2078, 2080, 2090, 2094,
     2104, 2170, 2156, 2159,   66, 2162, 2165

    } ;

static const flex_int16_t yy_def[398] =
    {   0,
      392,    1,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  394,  392,  392,  392,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
       45,   47,   45,   47,   47,   47,   47,   47,   47,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  395,  392,  392,  392,
      392,  392,  396,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   45,   47,   47,   47,
       45,   47,   47,   47,   45,   55,   47,   47,   47,   47,
      392,  392,  392,  392,  392,  392,  397,  392,  392,  392,
      392,  392,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

      392,  392,  392,  392,  392,  392,  397,  397,  392,  392,
      392,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,  392,  392,  392,  392,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,    0,  392,  392,  392,  392,  392

    } ;

static const flex_int16_t yy_nxt[2233] =
    {   0,
       16,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   29,   29,   30,   31,   32,
       33,   34,   35,   36,   36,   36,   36,   36,   36,   37,
       38,   39,   36,   40,   41,   42,   43,   44,   45,   46,
       36,   47,   36,   48,   49,   50,   51,   52,   53,   36,
       54,   55,   56,   57,   58,   59,   36,   36,   60,   61,
       62,   63,   69,   71,   84,   74,   75,  137,   76,   77,
      392,   84,  128,   72,   70,   74,  208,   84,   75,   78,
       78,   78,   78,   83,   83,   83,   83,  208,   76,   83,
       83,   83,   83,  133,  133,  201,  201,   77,   79,   83,

       83,   83,   83,   83,   83,   83,   83,  136,  136,  136,
       85,   83,   83,   83,   83,   83,   83,   83,   83,  205,
      205,  205,   86,   90,  142,  201,  201,   87,  132,   83,
       83,   83,   83,   88,   91,   93,   89,   92,   83,   83,
       83,   83,  131,  114,  202,   94,   95,  115,   96,   98,
       83,   83,   83,   83,   84,   84,   82,   99,   97,   81,
       84,   80,  103,  100,   73,   68,  101,   67,   66,  102,
       83,   83,   83,   83,   65,  104,   83,   83,   83,   83,
      201,  201,  105,  106,   83,   83,   83,   83,  107,  111,
      116,  392,  392,  112,  108,  392,  392,   84,   84,  202,

      109,  392,  392,   84,   84,  392,   84,  117,  392,  113,
      118,  119,   84,  120,   84,  392,  392,  392,  110,   84,
       84,   84,   84,  392,  392,   84,  392,   84,  121,  122,
       84,  123,  125,  124,  129,  392,  392,   84,   84,   84,
      392,  392,  126,   84,  392,  392,   84,   84,   84,  127,
      130,  392,   84,  392,  392,   84,   84,  134,  392,  134,
      392,   84,  135,  135,  135,  135,  138,  392,  139,  139,
      139,  139,   78,   78,   78,   78,   84,  392,   84,  392,
      140,  392,  392,   84,   84,   84,   84,  141,   84,   84,
       84,  143,  140,  392,  392,   84,   84,   84,   84,  392,

      392,   84,   84,   84,  146,   84,  392,  144,  392,   84,
       84,  145,   84,   84,   84,   84,  392,  392,   84,  149,
      392,   84,   84,  392,   84,  392,   84,  147,  148,  392,
      392,   84,   84,   84,  150,   84,  392,   84,  392,   84,
      151,  152,   84,   84,  153,  392,   84,  392,   84,  392,
      154,   84,   84,   84,   84,   84,  392,   84,  392,  155,
      392,  392,   84,   84,   84,  392,  392,  392,   84,  392,
      156,   84,   84,   84,  157,   84,  392,   84,  158,  159,
       84,   84,   84,  160,   84,  392,   84,  392,   84,  392,
      392,   84,   84,   84,  392,  392,  161,   84,  392,  392,

       84,   84,  162,   84,  392,   84,   84,   84,  392,  392,
       84,  163,   84,   84,   84,   84,   84,   84,   84,  164,
       84,  166,  392,  392,   84,   84,  392,  165,   84,   84,
       84,   84,  392,   84,  167,  168,  392,  392,   84,   84,
       84,   84,   84,  392,   84,  392,   84,  392,  392,   84,
       84,  171,  169,   84,  392,   84,  170,   84,  392,  392,
       84,   84,  392,  392,  172,   84,   84,   84,  392,   84,
       84,  392,  392,  177,   84,   84,   84,   84,  392,   84,
       84,   84,   84,  173,  174,  175,  176,   84,   84,   84,
      178,   84,   84,   84,   84,  392,  392,  392,  181,  179,

       84,   84,   84,  392,  392,  180,   84,  182,   84,   84,
       84,   84,   84,  392,   84,   84,  186,  392,  392,   84,
       84,   84,   84,  183,   84,   84,  184,   84,  185,  392,
       84,   84,  392,  187,  392,  392,   84,   84,   84,   84,
       84,  188,   84,  189,   84,  191,   84,   84,   84,  190,
       84,   84,  392,   84,  192,   84,  392,   84,  392,  392,
       84,   84,  193,  392,   84,  392,  194,   84,   84,  196,
      195,   84,  392,   84,  197,   84,  198,  392,   84,   84,
      392,  392,   84,   84,   84,  392,   84,  199,   84,  200,
      205,  205,  205,   84,   84,  135,  135,  135,  135,   84,

      203,  203,  203,  203,  209,  209,  209,  209,  138,  206,
      139,  139,  139,  139,  392,  392,  140,  392,  210,  204,
      210,  392,  140,  211,  211,  211,  211,  392,  140,  141,
      139,  139,  139,  139,  140,   84,  392,   84,  203,  203,
      203,  203,   84,   84,   84,   84,   84,  392,   84,  212,
       84,  214,  213,   84,   84,  392,   84,  215,   84,   84,
      392,  392,  392,   84,   84,   84,   84,  216,   84,   84,
       84,   84,   84,  392,  392,   84,   84,   84,   84,   84,
       84,  217,   84,   84,  392,  218,  219,  392,  392,   84,
       84,  222,   84,  223,   84,   84,   84,  220,  221,   84,

       84,   84,   84,   84,   84,   84,  392,   84,   84,   84,
      224,   84,  392,  392,  392,  225,   84,  392,   84,   84,
       84,   84,  227,   84,   84,  392,  392,   84,   84,  226,
       84,   84,   84,   84,  392,  392,   84,  229,  392,   84,
       84,  392,   84,  392,   84,  228,   84,  392,  392,   84,
       84,   84,   84,  230,   84,   84,  392,   84,  231,   84,
      392,   84,  392,   84,  392,  205,  205,  205,   84,   84,
       84,   84,   84,  392,   84,  392,   84,  392,  232,   84,
       84,  233,  234,   84,  206,   84,   84,  392,  392,  392,
       84,   84,  392,   84,   84,   84,   84,  236,   84,   84,

      235,  392,   84,   84,  237,   84,   84,   84,   84,   84,
      392,   84,  392,  392,   84,   84,   84,   84,  239,   84,
       84,  392,   84,  392,  238,  392,   84,   84,  240,   84,
      392,   84,   84,  392,  392,  392,   84,   84,   84,   84,
       84,  392,   84,  392,   84,  242,  241,   84,   84,   84,
      243,   84,  392,   84,  392,  392,   84,   84,   84,   84,
       84,  392,   84,   84,   84,  244,  392,   84,   84,  392,
       84,   84,  392,   84,   84,  392,   84,   84,  392,  245,
      392,   84,   84,  247,   84,   84,  392,   84,  246,  248,
       84,   84,  392,   84,  211,  211,  211,  211,   84,   84,

       84,   84,   84,  392,   84,   84,   84,  392,  249,   84,
       84,  392,   84,   84,   84,   84,   84,  250,   84,  252,
      392,   84,   84,   84,   84,  253,   84,   84,  251,   84,
       84,  392,  392,   84,   84,  392,  255,   84,   84,   84,
       84,  392,   84,   84,  254,  392,  392,   84,   84,   84,
       84,   84,  392,   84,  392,  256,  392,  392,   84,   84,
      257,  258,   84,  392,   84,   84,  392,  392,  392,   84,
       84,  392,   84,   84,  392,   84,  259,   84,   84,  260,
       84,  392,  392,  392,   84,   84,  392,   84,   84,   84,
       84,   84,  392,   84,  392,  392,   84,   84,   84,  262,

      261,   84,   84,  392,   84,   84,  392,  392,   84,   84,
      392,  263,   84,   84,   84,  392,  392,  392,   84,  203,
      203,  203,  203,  264,  264,  264,  264,  266,  266,  266,
      266,  392,   84,  392,  392,   75,  392,  392,  204,   84,
       84,  392,  265,  392,  268,   84,  267,   75,  269,   84,
      392,  392,  392,   84,  392,  392,   84,   84,  270,  392,
       84,   84,   84,   84,  392,   84,   84,  271,  392,  392,
       84,   84,   84,   84,   84,  392,   84,   84,   84,  392,
      392,   84,   84,  392,   84,   84,   84,  272,  392,  274,
       84,  273,  276,   84,   84,   84,  275,   84,  392,   84,

      392,  392,   84,   84,   84,   84,   84,  392,   84,   84,
       84,  392,  392,   84,   84,  392,   84,   84,   84,   84,
       84,  277,   84,  278,  392,   84,   84,   84,   84,   84,
      392,   84,   84,   84,  392,  392,   84,   84,  392,   84,
      280,  279,   84,  281,   84,   84,  392,   84,  392,  392,
      392,   84,   84,  282,   84,   84,   84,   84,   84,  392,
       84,  392,  392,   84,   84,   84,   84,  284,   84,   84,
       84,   84,  283,  392,  392,   84,   84,   84,   84,   84,
      392,   84,  285,   84,  287,  392,   84,   84,  392,   84,
      392,  286,   84,   84,  392,  392,   84,   84,  392,  392,

       84,   84,   84,  289,  392,  288,   84,   84,  392,  392,
       84,   84,  392,  290,   84,   84,   84,   84,  392,   84,
       84,   84,  392,  392,   84,   84,   84,   84,   84,   84,
      291,  292,   84,  295,   84,  293,   84,  294,   84,  392,
       84,  392,  392,   84,   84,   84,   84,   84,   84,   84,
      296,   84,  392,   84,  392,   84,  297,   84,  264,  264,
      264,  264,   84,   84,   84,   84,   84,  392,   84,  298,
       84,  392,  392,   84,   84,   84,  392,  392,   84,   84,
      392,  300,   84,   84,  299,   84,   84,   84,   84,   84,
      392,   84,  302,  392,   84,   84,   84,   84,   84,  301,

       84,   84,   84,  392,  392,   84,  303,  305,   84,   84,
       84,   84,   84,  304,   84,  392,  392,   84,   84,   84,
       84,  306,   84,   84,   84,   84,   84,  392,  392,   84,
       84,   84,   84,   84,   84,   84,   84,   84,  392,   84,
      309,  307,  392,   84,   84,  308,  392,   84,   84,   84,
       84,  392,  392,   84,  392,  392,  392,   84,   84,   84,
      392,  312,   84,   84,  392,  310,   84,   84,  311,   84,
       84,  392,   84,  392,  392,   84,  264,  264,  264,  264,
      266,  266,  266,  266,  266,  266,  266,  266,   75,  313,
      392,  314,  392,  392,   84,  265,   84,  392,   84,  267,

       75,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,  392,  392,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  315,   84,   84,  317,  392,   84,
      316,  392,  392,   84,   84,   84,   84,  392,  392,   84,
      392,  392,  392,   84,   84,   84,  320,   84,  318,   84,
      392,  319,   84,   84,   84,   84,   84,  322,   84,   84,
       84,  392,  392,   84,   84,  392,   84,   84,   84,   84,
      321,   84,   84,  392,  392,   84,   84,  323,   84,   84,
       84,   84,   84,  324,   84,  392,  392,   84,   84,  325,
       84,   84,  392,   84,   84,   84,  392,  392,   84,   84,

      392,   84,   84,   84,   84,  326,  328,   84,  392,  392,
       84,  327,  392,   84,   84,   84,   84,  329,   84,   84,
      392,  392,   84,   84,  392,   84,   84,   84,   84,  392,
      392,   84,  392,  392,   84,   84,   84,  330,   84,  392,
       84,  392,  392,   84,   84,   84,   84,   84,  392,   84,
      331,   84,  392,  392,   84,   84,   84,  333,   84,  392,
       84,  332,  392,   84,   84,   84,   84,  335,  392,   84,
       84,   84,  334,  392,  392,  392,  336,   84,   84,   84,
      392,   84,  392,   84,  392,  392,   84,   84,   84,  337,
       84,  392,   84,   84,   84,  392,  392,   84,   84,  392,

       84,  339,  338,   84,  340,   84,   84,   84,  392,   84,
      341,  392,   84,   84,   84,   84,   84,   84,   84,   84,
       84,  342,   84,   84,  392,  392,   84,   84,  392,  343,
       84,   84,   84,   84,  392,  344,   84,  392,  392,  392,
       84,   84,   84,   84,   84,  392,   84,  345,   84,  392,
      392,   84,   84,  346,   84,  392,   84,   84,   84,  392,
      392,   84,   84,   84,   84,   84,   84,   84,  392,   84,
      392,   84,  348,  347,  392,   84,  392,   84,  392,   84,
      392,  392,   84,   84,   84,  349,   84,   84,   84,   84,
       84,  392,   84,  392,  350,  392,   84,   84,  352,   84,

      353,   84,   84,   84,  351,  392,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,  354,  392,  392,
       84,   84,   84,   84,   84,  392,   84,   84,   84,  392,
      392,   84,   84,  392,   84,   84,   84,  355,  392,  392,
       84,  392,  392,   84,   84,  357,  356,  358,   84,   84,
       84,  392,  392,  392,  392,   84,   84,   84,   84,  359,
      360,   84,   84,   84,  392,   84,  392,  392,  392,   84,
       84,  361,   84,   84,   84,   84,   84,  392,   84,  392,
      392,   84,   84,   84,   84,   84,  392,   84,   84,   84,
      392,  392,   84,   84,  392,   84,   84,  392,   84,  362,

       84,   84,  363,   84,  392,  392,  392,   84,   84,  392,
       84,   84,   84,   84,   84,  392,   84,  392,  392,   84,
       84,   84,   84,   84,  392,   84,  364,   84,  392,  365,
       84,   84,  366,   84,  392,   84,   84,   84,  392,  392,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  392,  392,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,  392,  392,   84,   84,
       84,  367,   84,   84,   84,   84,   84,   84,   84,   84,
      392,  392,   84,  368,   84,   84,   84,   84,   84,  392,
       84,  369,   84,  370,  392,  392,   84,  371,   84,  392,

       84,  392,  392,   84,   84,   84,   84,   84,   84,   84,
       84,   84,  372,   84,   84,  392,  392,   84,   84,  392,
      392,   84,   84,   84,   84,  392,   84,   84,   84,  392,
      392,   84,   84,   84,   84,   84,  373,   84,   84,   84,
      392,   84,  392,  392,  392,   84,  374,  375,   84,  376,
      392,   84,   84,  392,  392,   84,   84,  392,  392,   84,
       84,   84,   84,  377,   84,   84,   84,  392,  392,   84,
       84,   84,   84,   84,   84,   84,  392,   84,   84,   84,
      378,   84,  392,  392,  392,   84,   84,  392,   84,   84,
      392,   84,   84,  392,   84,  380,   84,  379,  392,   84,

       84,  392,  392,   84,   84,   84,   84,  392,   84,   84,
       84,  392,  392,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,  381,  392,  392,   84,   84,   84,
       84,   84,  392,   84,   84,   84,  392,  392,   84,   84,
      392,   84,   84,   84,   84,  384,   84,   84,  382,  392,
       84,   84,  383,   84,   84,  392,   84,  385,   84,   84,
      386,  392,   84,  392,  392,   84,   84,  392,  392,   84,
       84,   84,   84,  392,  387,   84,   84,  392,  392,   84,
       84,  392,  392,   84,   84,   84,   84,  392,  392,   84,
       84,  392,  392,   84,   84,  388,  392,   84,   84,   84,

      390,  392,   84,  389,   84,  392,  392,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,  392,
      392,   84,   84,   84,   84,   84,   84,   84,   84,   84,
      391,   84,   84,  392,  392,   84,   84,  392,  392,   84,
       84,   84,   84,  392,  392,   84,  392,  392,  392,   84,
       84,  392,  392,  392,  392,   84,   64,   64,   64,   64,
       84,   84,   84,   83,   83,   83,  207,  392,  207,   15,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392
    } ;

static const flex_int16_t yy_chk[2233] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   23,   25,   57,   28,   28,  395,   28,   28,
      208,   57,   57,   25,   23,   28,  207,   57,   28,   29,
       29,   29,   29,   36,   36,   36,   36,  137,   28,   40,
       40,   40,   40,   74,   74,  202,  202,   28,   29,   41,

       41,   41,   41,   42,   42,   42,   42,   76,   76,   76,
       40,   43,   43,   43,   43,   44,   44,   44,   44,  206,
      206,  206,   40,   42,   81,  133,  133,   40,   65,   45,
       45,   45,   45,   41,   42,   43,   41,   42,   46,   46,
       46,   46,   61,   52,  133,   43,   44,   52,   44,   45,
       47,   47,   47,   47,   52,   52,   34,   45,   44,   33,
       52,   32,   46,   45,   27,   22,   45,   19,   18,   45,
       48,   48,   48,   48,   17,   47,   49,   49,   49,   49,
      201,  201,   47,   47,   50,   50,   50,   50,   47,   51,
       53,   15,    0,   51,   48,    0,    0,   51,   53,  201,

       49,    0,    0,   51,   53,    0,   51,   53,    0,   51,
       53,   54,   54,   55,   55,    0,    0,    0,   50,   54,
       54,   55,   55,    0,    0,   54,    0,   55,   55,   55,
       56,   55,   56,   55,   58,    0,    0,   56,   56,   58,
        0,    0,   56,   56,    0,    0,   58,   58,   59,   56,
       59,    0,   58,    0,    0,   59,   59,   75,    0,   75,
        0,   59,   75,   75,   75,   75,   78,    0,   78,   78,
       78,   78,   79,   79,   79,   79,   84,    0,   85,    0,
       78,    0,    0,   84,   84,   85,   85,   78,   86,   84,
       87,   85,   78,    0,    0,   86,   86,   87,   87,    0,

        0,   86,   88,   87,   89,   89,    0,   86,    0,   88,
       88,   88,   89,   89,   90,   88,    0,    0,   89,   91,
        0,   90,   90,    0,   91,    0,   92,   90,   90,    0,
        0,   91,   91,   92,   92,   94,    0,   91,    0,   92,
       93,   93,   94,   94,   93,    0,   95,    0,   94,    0,
       93,   93,   93,   95,   95,   96,    0,   93,    0,   95,
        0,    0,   96,   96,   97,    0,    0,    0,   96,    0,
       96,   97,   97,   98,   97,   99,    0,   97,   97,   98,
       98,   98,   99,   99,  100,    0,   98,    0,   99,    0,
        0,  100,  100,  101,    0,    0,  100,  100,    0,    0,

      101,  101,  101,  102,    0,  103,  101,  104,    0,    0,
      102,  102,  103,  103,  104,  104,  102,  105,  103,  103,
      104,  106,    0,    0,  105,  105,    0,  105,  106,  106,
      105,  107,    0,  108,  106,  106,    0,    0,  107,  107,
      108,  108,  109,    0,  107,    0,  108,    0,    0,  109,
      109,  110,  108,  110,    0,  109,  109,  111,    0,    0,
      110,  110,    0,    0,  111,  111,  110,  112,    0,  114,
      111,    0,    0,  114,  112,  112,  114,  114,    0,  113,
      112,  115,  114,  112,  112,  113,  113,  113,  115,  115,
      116,  117,  113,  116,  115,    0,    0,    0,  118,  117,

      116,  116,  118,    0,    0,  117,  116,  119,  117,  118,
      118,  117,  119,    0,  120,  118,  121,    0,    0,  119,
      119,  120,  120,  119,  121,  119,  119,  120,  120,    0,
      121,  122,    0,  121,    0,    0,  121,  125,  122,  122,
      123,  122,  124,  123,  122,  125,  126,  123,  123,  124,
      124,  125,    0,  123,  125,  124,    0,  125,    0,    0,
      127,  126,  126,    0,  126,    0,  126,  127,  127,  128,
      127,  128,    0,  127,  128,  129,  128,    0,  128,  128,
        0,    0,  129,  129,  128,    0,  130,  129,  129,  130,
      136,  136,  136,  130,  130,  134,  134,  134,  134,  130,

      135,  135,  135,  135,  138,  138,  138,  138,  139,  136,
      139,  139,  139,  139,    0,    0,  138,    0,  140,  135,
      140,    0,  139,  140,  140,  140,  140,    0,  138,  139,
      141,  141,  141,  141,  139,  143,    0,  144,  204,  204,
      204,  204,  143,  143,  144,  144,  145,    0,  143,  143,
      144,  146,  145,  145,  145,    0,  146,  147,  147,  145,
        0,    0,    0,  146,  146,  147,  147,  148,  149,  146,
      148,  147,  150,    0,    0,  149,  149,  148,  148,  150,
      150,  149,  151,  148,    0,  150,  150,    0,    0,  151,
      151,  153,  152,  154,  154,  151,  153,  151,  152,  152,

      152,  154,  154,  153,  153,  152,    0,  154,  156,  153,
      155,  155,    0,    0,    0,  156,  156,    0,  155,  155,
      157,  156,  158,  158,  155,    0,    0,  157,  157,  157,
      158,  158,  159,  157,    0,    0,  158,  160,    0,  159,
      159,    0,  160,    0,  161,  159,  162,    0,    0,  160,
      160,  161,  161,  162,  162,  160,    0,  161,  163,  162,
        0,  163,    0,  164,    0,  205,  205,  205,  163,  163,
      164,  164,  165,    0,  163,    0,  164,    0,  165,  165,
      165,  165,  166,  166,  205,  165,  167,    0,    0,    0,
      166,  166,    0,  167,  167,  169,  166,  168,  168,  167,

      167,    0,  169,  169,  169,  168,  168,  170,  169,  171,
        0,  168,    0,    0,  170,  170,  171,  171,  172,  172,
      170,    0,  171,    0,  171,    0,  172,  172,  173,  173,
        0,  174,  172,    0,    0,    0,  173,  173,  174,  174,
      175,    0,  173,    0,  174,  176,  175,  175,  175,  176,
      177,  177,    0,  175,    0,    0,  176,  176,  177,  177,
      178,    0,  176,  179,  177,  178,    0,  178,  178,    0,
      179,  179,    0,  178,  180,    0,  179,  181,    0,  179,
        0,  180,  180,  181,  181,  181,    0,  180,  180,  182,
      181,  182,    0,  183,  210,  210,  210,  210,  182,  182,

      183,  183,  184,    0,  182,  185,  183,    0,  183,  184,
      184,    0,  185,  185,  186,  184,  187,  184,  185,  187,
        0,  186,  186,  187,  187,  188,  188,  186,  186,  187,
      189,    0,    0,  188,  188,    0,  190,  189,  189,  188,
      190,    0,  191,  189,  189,    0,    0,  190,  190,  191,
      191,  192,    0,  190,    0,  191,    0,    0,  192,  192,
      192,  193,  193,    0,  192,  194,    0,    0,    0,  193,
      193,    0,  194,  194,    0,  193,  195,  195,  194,  196,
      196,    0,    0,    0,  195,  195,    0,  196,  196,  197,
      195,  198,    0,  196,    0,    0,  197,  197,  198,  198,

      197,  199,  197,    0,  198,  200,    0,    0,  199,  199,
        0,  200,  200,  200,  199,    0,    0,    0,  200,  203,
      203,  203,  203,  209,  209,  209,  209,  211,  211,  211,
      211,    0,  212,    0,    0,  209,    0,    0,  203,  212,
      212,    0,  209,    0,  212,  212,  211,  209,  213,  213,
        0,    0,    0,  214,    0,    0,  213,  213,  214,    0,
      214,  214,  213,  215,    0,  216,  214,  216,    0,    0,
      215,  215,  216,  216,  217,    0,  215,  218,  216,    0,
        0,  217,  217,    0,  218,  218,  219,  217,    0,  219,
      218,  218,  221,  219,  219,  220,  220,  221,    0,  219,

        0,    0,  220,  220,  221,  221,  222,    0,  220,  223,
      221,    0,    0,  222,  222,    0,  223,  223,  224,  222,
      225,  222,  223,  223,    0,  224,  224,  225,  225,  226,
        0,  224,  227,  225,    0,    0,  226,  226,    0,  227,
      227,  226,  226,  228,  228,  227,    0,  229,    0,    0,
        0,  228,  228,  229,  229,  229,  230,  228,  231,    0,
      229,    0,    0,  230,  230,  231,  231,  232,  232,  230,
      233,  231,  231,    0,    0,  232,  232,  233,  233,  234,
        0,  232,  233,  233,  235,    0,  234,  234,    0,  235,
        0,  234,  234,  236,    0,    0,  235,  235,    0,    0,

      236,  236,  235,  237,    0,  236,  236,  238,    0,    0,
      237,  237,    0,  238,  238,  238,  237,  239,    0,  240,
      238,  241,    0,    0,  239,  239,  240,  240,  241,  241,
      239,  240,  240,  244,  241,  242,  242,  243,  244,    0,
      243,    0,    0,  242,  242,  244,  244,  243,  243,  242,
      245,  244,    0,  243,    0,  245,  246,  246,  265,  265,
      265,  265,  245,  245,  246,  246,  247,    0,  245,  247,
      246,    0,    0,  247,  247,  248,    0,    0,  249,  247,
        0,  249,  248,  248,  248,  249,  249,  250,  248,  251,
        0,  249,  251,    0,  250,  250,  251,  251,  252,  250,

      250,  253,  251,    0,    0,  252,  252,  254,  253,  253,
      254,  252,  255,  253,  253,    0,    0,  254,  254,  255,
      255,  255,  256,  254,  257,  255,  258,    0,    0,  256,
      256,  257,  257,  258,  258,  256,  259,  257,    0,  258,
      260,  257,    0,  259,  259,  259,    0,  260,  260,  259,
      261,    0,    0,  260,    0,    0,    0,  261,  261,  262,
        0,  263,  263,  261,    0,  261,  262,  262,  262,  263,
      263,    0,  262,    0,    0,  263,  264,  264,  264,  264,
      266,  266,  266,  266,  267,  267,  267,  267,  264,  268,
        0,  269,    0,    0,  268,  264,  269,    0,  270,  266,

      264,  268,  268,  269,  269,  270,  270,  268,  271,  269,
      272,  270,  273,    0,    0,  271,  271,  272,  272,  273,
      273,  271,  274,  272,  273,  273,  275,  275,    0,  274,
      274,    0,    0,  275,  275,  274,  276,    0,    0,  275,
        0,    0,    0,  276,  276,  277,  278,  278,  276,  276,
        0,  277,  277,  277,  278,  278,  279,  280,  277,  280,
      278,    0,    0,  279,  279,    0,  280,  280,  281,  279,
      279,  282,  280,    0,    0,  281,  281,  282,  282,  282,
      283,  281,  284,  283,  282,    0,    0,  283,  283,  284,
      284,  285,    0,  283,  286,  284,    0,    0,  285,  285,

        0,  286,  286,  287,  285,  285,  288,  286,    0,    0,
      287,  287,    0,  288,  288,  289,  287,  290,  290,  288,
        0,    0,  289,  289,    0,  290,  290,  291,  289,    0,
        0,  290,    0,    0,  291,  291,  292,  291,  293,    0,
      291,    0,    0,  292,  292,  293,  293,  294,    0,  292,
      293,  293,    0,    0,  294,  294,  295,  295,  296,    0,
      294,  294,    0,  295,  295,  296,  296,  297,    0,  295,
      297,  296,  296,    0,    0,    0,  298,  297,  297,  298,
        0,  299,    0,  297,    0,    0,  298,  298,  299,  299,
      300,    0,  298,  301,  299,    0,    0,  300,  300,    0,

      301,  301,  300,  300,  302,  304,  301,  302,    0,  303,
      303,    0,  304,  304,  302,  302,  303,  303,  304,  305,
      302,  305,  303,  306,    0,    0,  305,  305,    0,  306,
      306,  306,  305,  307,    0,  308,  306,    0,    0,    0,
      307,  307,  308,  308,  309,    0,  307,  309,  308,    0,
        0,  309,  309,  310,  310,    0,  311,  309,  312,    0,
        0,  310,  310,  311,  311,  312,  312,  310,    0,  311,
        0,  312,  313,  311,    0,  313,    0,  314,    0,  315,
        0,    0,  313,  313,  314,  314,  315,  315,  313,  316,
      314,    0,  315,    0,  315,    0,  316,  316,  317,  317,

      318,  318,  316,  319,  316,    0,  317,  317,  318,  318,
      319,  319,  317,  320,  318,  321,  319,  319,    0,    0,
      320,  320,  321,  321,  322,    0,  320,  323,  321,    0,
        0,  322,  322,    0,  323,  323,  324,  322,    0,    0,
      323,    0,    0,  324,  324,  324,  323,  325,  325,  324,
      326,    0,    0,    0,    0,  325,  325,  326,  326,  327,
      328,  325,  327,  326,    0,  328,    0,    0,    0,  327,
      327,  330,  328,  328,  329,  327,  330,    0,  328,    0,
        0,  329,  329,  330,  330,  331,    0,  329,  332,  330,
        0,    0,  331,  331,    0,  332,  332,    0,  331,  333,

      333,  332,  334,  334,    0,    0,    0,  333,  333,    0,
      334,  334,  335,  333,  336,    0,  334,    0,    0,  335,
      335,  336,  336,  337,    0,  335,  335,  336,    0,  337,
      337,  337,  338,  338,    0,  339,  337,  340,    0,    0,
      338,  338,  339,  339,  340,  340,  338,  341,  339,  342,
      340,  343,    0,    0,  341,  341,  342,  342,  343,  343,
      341,  344,  342,  345,  343,  346,    0,    0,  344,  344,
      345,  345,  346,  346,  344,  347,  345,  348,  346,  349,
        0,    0,  347,  347,  348,  348,  349,  349,  347,    0,
      348,  348,  349,  350,    0,    0,  350,  351,  351,    0,

      352,    0,    0,  350,  350,  351,  351,  352,  352,  350,
      353,  351,  352,  352,  354,    0,    0,  353,  353,    0,
        0,  354,  354,  353,  355,    0,  356,  354,  357,    0,
        0,  355,  355,  356,  356,  357,  357,  355,  358,  356,
        0,  357,    0,    0,    0,  358,  358,  359,  359,  360,
        0,  358,  360,    0,    0,  359,  359,    0,    0,  360,
      360,  359,  362,  361,  363,  360,  361,    0,    0,  362,
      362,  363,  363,  361,  361,  362,    0,  363,  365,  361,
      364,  364,    0,    0,    0,  365,  365,    0,  364,  364,
        0,  365,  366,    0,  364,  367,  367,  365,    0,  366,

      366,    0,    0,  367,  367,  366,  368,    0,  369,  367,
      370,    0,    0,  368,  368,  369,  369,  370,  370,  368,
      371,  369,  372,  370,  370,    0,    0,  371,  371,  372,
      372,  373,    0,  371,  374,  372,    0,    0,  373,  373,
        0,  374,  374,  375,  373,  376,  376,  374,  374,    0,
      375,  375,  375,  376,  376,    0,  375,  377,  377,  376,
      378,    0,  378,    0,    0,  377,  377,    0,    0,  378,
      378,  377,  379,    0,  380,  378,  380,    0,    0,  379,
      379,    0,    0,  380,  380,  379,  381,    0,    0,  380,
      382,    0,    0,  381,  381,  381,    0,  382,  382,  381,

      383,    0,  384,  382,  385,    0,    0,  383,  383,  384,
      384,  385,  385,  383,  386,  384,  387,  385,  388,    0,
        0,  386,  386,  387,  387,  388,  388,  386,  389,  387,
      388,  388,  390,    0,    0,  389,  389,    0,    0,  390,
      390,  389,  391,    0,    0,  390,    0,    0,    0,  391,
      391,    0,    0,    0,    0,  391,  393,  393,  393,  393,
      394,  394,  394,  396,  396,  396,  397,    0,  397,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[118] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "lexer.l"
#line 6 "lexer.l"

#include <string>
#include <algorithm>
#include <charconv>
#include <iostream>
#include <cstdio>


void Print(const std::string& message)
{
    std::cout << message << std::endl;
}

void PrintError(const std::string& errorMessage, const int line = -1) 
{
    std::cerr << errorMessage << std::endl;
    if (line >= 0)
        std::cerr << "Line: " << line << std::endl;
    std::cerr << std::endl;
}

void PrintIntegerLiteral(const std::string& type, const int integer) {
    Print("Found " + type + " integer literal: " + std::to_string(integer));
}

void PrintFloatingPointLiteral(const double floatingPoint) {
    Print("Found floating point literal: " + std::to_string(floatingPoint));
}

void RemoveCharacterFromString(std::string& str, char ch) {
    const auto newLast = std::remove(str.begin(), str.end(), ch);
    str.erase(newLast, str.end());
}

void RemoveUnderline(std::string& str) {
    RemoveCharacterFromString(str, '_');
}

#line 1142 "lexer.flex.cpp"

#line 1144 "lexer.flex.cpp"

#define INITIAL 0
#define STR_DOUBLE_Q 1
#define STR_SINGLE_Q 2
#define STR_BACK_Q 3
#define MULTILINE_COMMENT 4
#define COMMENT 5
#define COMMENTONE 6

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 73 "lexer.l"




#line 78 "lexer.l"
std::string currentString;
std::string currentComment;

int currentInteger;
char currentCharacter;
double currentFloatingPoint;
char buffer[10];    
char bufferString[1000];



#line 1381 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 392 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 89 "lexer.l"
{ Print("Found KW_ABSTRACT: " + std::string{yytext}); } 
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 90 "lexer.l"
{ Print("Found TYPE_ANY: " + std::string{yytext}); } 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 91 "lexer.l"
{ Print("Found KW_AS: " + std::string{yytext}); } 
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 92 "lexer.l"
{ Print("Found TYPE_BOOLEAN: " + std::string{yytext}); } 
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 93 "lexer.l"
{ Print("Found KW_BREAK: " + std::string{yytext}); } 
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 94 "lexer.l"
{ Print("Found KW_CASE: " + std::string{yytext}); } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 95 "lexer.l"
{ Print("Found KW_CATCH: " + std::string{yytext}); } 
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "lexer.l"
{ Print("Found KW_CLASS: " + std::string{yytext}); } 
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 97 "lexer.l"
{ Print("Found KW_CONTINUE: " + std::string{yytext}); } 
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 98 "lexer.l"
{ Print("Found KW_CONST: " + std::string{yytext}); } 
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 99 "lexer.l"
{ Print("Found KW_CONSTRUCTOR: " + std::string{yytext}); } 
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ Print("Found KW_DEBUGGER: " + std::string{yytext}); } 
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ Print("Found KW_DECLARE: " + std::string{yytext}); } 
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "lexer.l"
{ Print("Found KW_DEFAULT: " + std::string{yytext}); } 
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "lexer.l"
{ Print("Found KW_DELETE: " + std::string{yytext}); } 
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "lexer.l"
{ Print("Found KW_DO: " + std::string{yytext}); } 
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "lexer.l"
{ Print("Found KW_ELSE: " + std::string{yytext}); } 
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "lexer.l"
{ Print("Found KW_ENUM: " + std::string{yytext}); } 
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 107 "lexer.l"
{ Print("Found KW_EXPORT: " + std::string{yytext}); } 
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 108 "lexer.l"
{ Print("Found KW_EXTENDS: " + std::string{yytext}); } 
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "lexer.l"
{ Print("Found KW_FALSE: " + std::string{yytext}); } 
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "lexer.l"
{ Print("Found KW_FINALLY: " + std::string{yytext}); } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 111 "lexer.l"
{ Print("Found KW_FOR: " + std::string{yytext}); } 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 112 "lexer.l"
{ Print("Found KW_FROM: " + std::string{yytext}); } 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 113 "lexer.l"
{ Print("Found KW_FUNCTION: " + std::string{yytext}); } 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 114 "lexer.l"
{ Print("Found KW_GET: " + std::string{yytext}); } 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 115 "lexer.l"
{ Print("Found KW_IF: " + std::string{yytext}); } 
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 116 "lexer.l"
{ Print("Found KW_IMPLEMENTS: " + std::string{yytext}); } 
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "lexer.l"
{ Print("Found KW_IMPORT: " + std::string{yytext}); } 
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "lexer.l"
{ Print("Found KW_IN: " + std::string{yytext}); } 
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 119 "lexer.l"
{ Print("Found KW_INFER: " + std::string{yytext}); } 
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 120 "lexer.l"
{ Print("Found KW_INSTANCEOF: " + std::string{yytext}); } 
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 121 "lexer.l"
{ Print("Found KW_INTARFACE: " + std::string{yytext}); } 
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 122 "lexer.l"
{ Print("Found KW_IS: " + std::string{yytext}); } 
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 123 "lexer.l"
{ Print("Found KW_KEYOF: " + std::string{yytext}); } 
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 124 "lexer.l"
{ Print("Found KW_LET: " + std::string{yytext}); } 
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 125 "lexer.l"
{ Print("Found KW_MODULE: " + std::string{yytext}); } 
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 126 "lexer.l"
{ Print("Found KW_NAMESPACE: " + std::string{yytext}); } 
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 127 "lexer.l"
{ Print("Found TYPE_NEVER: " + std::string{yytext}); } 
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 128 "lexer.l"
{ Print("Found KW_NEW: " + std::string{yytext}); } 
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 129 "lexer.l"
{ Print("Found KW_NULL: " + std::string{yytext}); } 
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 130 "lexer.l"
{ Print("Found TYPE_NUMBER: " + std::string{yytext}); } 
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 131 "lexer.l"
{ Print("Found TYPE_OBJECT: " + std::string{yytext}); } 
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 132 "lexer.l"
{ Print("Found KW_OF: " + std::string{yytext}); } 
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 133 "lexer.l"
{ Print("Found KW_PACKAGE: " + std::string{yytext}); } 
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 134 "lexer.l"
{ Print("Found KW_PRIVATE: " + std::string{yytext}); } 
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 135 "lexer.l"
{ Print("Found KW_PROTECTED: " + std::string{yytext}); } 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 136 "lexer.l"
{ Print("Found KW_PUBLIC: " + std::string{yytext}); } 
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 137 "lexer.l"
{ Print("Found KW_READONLY: " + std::string{yytext}); } 
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 138 "lexer.l"
{ Print("Found KW_REQUIRE: " + std::string{yytext}); } 
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 139 "lexer.l"
{ Print("Found KW_RETURN: " + std::string{yytext}); } 
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 140 "lexer.l"
{ Print("Found KW_SET: " + std::string{yytext}); } 
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 141 "lexer.l"
{ Print("Found KW_STATIC: " + std::string{yytext}); } 
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 142 "lexer.l"
{ Print("Found TYPE_STRING: " + std::string{yytext}); } 
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 143 "lexer.l"
{ Print("Found KW_SUPER: " + std::string{yytext}); } 
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 144 "lexer.l"
{ Print("Found KW_SWITCH: " + std::string{yytext}); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 145 "lexer.l"
{ Print("Found TYPE_SYMBOL: " + std::string{yytext}); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 146 "lexer.l"
{ Print("Found KW_THIS: " + std::string{yytext}); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 147 "lexer.l"
{ Print("Found KW_THROW: " + std::string{yytext}); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 148 "lexer.l"
{ Print("Found KW_TRUE: " + std::string{yytext}); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 149 "lexer.l"
{ Print("Found KW_TRY: " + std::string{yytext}); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 150 "lexer.l"
{ Print("Found KW_TYPE: " + std::string{yytext}); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 151 "lexer.l"
{ Print("Found KW_TYPEOF: " + std::string{yytext}); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 152 "lexer.l"
{ Print("Found KW_UNIQUE: " + std::string{yytext}); } 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 153 "lexer.l"
{ Print("Found TYPE_UNKNOWN: " + std::string{yytext}); } 
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 154 "lexer.l"
{ Print("Found KW_VAR: " + std::string{yytext}); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 155 "lexer.l"
{ Print("Found KW_WHILE: " + std::string{yytext}); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 156 "lexer.l"
{ Print("Found KW_UNDEFINED: " + std::string{yytext}); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 158 "lexer.l"
{ Print("Found OPERATOR_OPT_PARAM: " + std::string{yytext}); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 159 "lexer.l"
{ Print("Found OPERATOR_MOD: " + std::string{yytext}); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 160 "lexer.l"
{ Print("Found OPERATOR_MOD_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 161 "lexer.l"
{ Print("Found OPERATOR_PLUS: " + std::string{yytext}); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 162 "lexer.l"
{ Print("Found OPERATOR_PLUS_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 163 "lexer.l"
{ Print("Found OPERATOR_INCREMENT: " + std::string{yytext}); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 164 "lexer.l"
{ Print("Found OPERATOR_MINUS: " + std::string{yytext}); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 165 "lexer.l"
{ Print("Found OPERATOR_MINUS_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 166 "lexer.l"
{ Print("Found OPERATOR_DICREMENT: " + std::string{yytext}); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 167 "lexer.l"
{ Print("Found OPERATOR_MUL: " + std::string{yytext}); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 168 "lexer.l"
{ Print("Found OPERATOR_MUL_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 169 "lexer.l"
{ Print("Found OPERATOR_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 170 "lexer.l"
{ Print("Found OPERATOR_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 171 "lexer.l"
{ Print("Found OPERATOR_EQUAL_BY_TYPE_AND_VALUE: " + std::string{yytext}); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 172 "lexer.l"
{ Print("Found OPERATOR_BIT_NOT: " + std::string{yytext}); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 173 "lexer.l"
{ Print("Found OPERATOR_NOT_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 174 "lexer.l"
{ Print("Found OPERATOR_NOT_EQUAL_BY_TYPE_AND_VALUE: " + std::string{yytext}); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 175 "lexer.l"
{ Print("Found OPERATOR_MORE: " + std::string{yytext}); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 176 "lexer.l"
{ Print("Found OPERATOR_MORE_OR_EQUAL: " + std::string{yytext}); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 177 "lexer.l"
{ Print("Found OPERATOR_LESS: " + std::string{yytext}); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 178 "lexer.l"
{ Print("Found OPERATOR_LESS_OR_EQUA: " + std::string{yytext}); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 179 "lexer.l"
{ Print("Found OPERATOR_DIV: " + std::string{yytext}); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 180 "lexer.l"
{ Print("Found OPERATOR_DIV_ASSIGNMENT: " + std::string{yytext}); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 181 "lexer.l"
{ Print("Found OPERATOR_BIT_XOR: " + std::string{yytext}); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 182 "lexer.l"
{ Print("Found UNARY_BITWISE_NOT: " + std::string{yytext}); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 183 "lexer.l"
{ Print("Found OPERATOR_AMPERSAND: " + std::string{yytext}); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 184 "lexer.l"
{ Print("Found OPERATOR_AND: " + std::string{yytext}); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 185 "lexer.l"
{ Print("Found OPERATOR_BIT_OR: " + std::string{yytext}); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 186 "lexer.l"
{ Print("Found OPERATOR_OR: " + std::string{yytext}); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 187 "lexer.l"
{ Print("Found LEFT_SQUARE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 188 "lexer.l"
{ Print("Found RIGHT_SQUARE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 189 "lexer.l"
{ Print("Found LEFT_ROUND_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 190 "lexer.l"
{ Print("Found RIGHT_ROUND_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "lexer.l"
{ Print("Found LEFT_FIGURE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "lexer.l"
{ Print("Found RIGHT_FIGURE_BRACKET: " + std::string{yytext}); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "lexer.l"
{ Print("Found COLON: " + std::string{yytext}); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "lexer.l"
{ Print("Found COMMA: " + std::string{yytext}); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "lexer.l"
{ Print("Found DOT: " + std::string{yytext}); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "lexer.l"
{ Print("Found SEMICOLON: " + std::string{yytext}); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 197 "lexer.l"
{ Print("Found OPERATOR_ENTER: \\n" + std::string{yytext}); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 201 "lexer.l"
{ /* Decimal literal */
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 208 "lexer.l"
{
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentFloatingPoint);
    PrintFloatingPointLiteral(currentFloatingPoint);
}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 215 "lexer.l"
{
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str(), number_string.c_str() + number_string.size(), currentInteger);
    PrintIntegerLiteral("decimal", currentInteger); 
}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 223 "lexer.l"
{ /* Binary integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 2);
    PrintIntegerLiteral("binary", currentInteger); 
}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 232 "lexer.l"
{  /* Octal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 8);
    PrintIntegerLiteral("octal", currentInteger); 
}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 241 "lexer.l"
{  /* Hexadecimal integer literal */
    currentInteger = 0;
    std::string number_string = yytext;
    RemoveCharacterFromString(number_string, '_');
    std::from_chars(number_string.c_str() + 2, number_string.c_str() + number_string.size(), currentInteger, 16);
    PrintIntegerLiteral("hexadecimal", currentInteger); 
}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 250 "lexer.l"
{ Print("Found identifier: " + std::string{yytext}); }
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 252 "lexer.l"
{}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 254 "lexer.l"
ECHO;
	YY_BREAK
#line 2063 "lexer.flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STR_DOUBLE_Q):
case YY_STATE_EOF(STR_SINGLE_Q):
case YY_STATE_EOF(STR_BACK_Q):
case YY_STATE_EOF(MULTILINE_COMMENT):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(COMMENTONE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 392);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 254 "lexer.l"


int main(int argc, char *argv[]) {
    if (argc < 2) {
        Print("Usage: %s <input_file>\n" + std::string{argv[0]});
        return 1;
    }

    FILE *input_file = fopen(argv[1], "r");
    if (!input_file) {
        PrintError("could not open file: " + std::string{argv[1]});
        return 1;
    }
    
	FILE* output_file = fopen("output.txt", "w");
	if (!output_file) {
		PrintError("could not create output file\n");
		fclose(input_file);
		return 1;
	}

    yyin = input_file;
    yyout = output_file;
    yylex();        

	fclose(input_file);
	fclose(output_file);
    return 0;
}

